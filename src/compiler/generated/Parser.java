
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.generated;

import util.Log;
import util.ListCreator;
import main.Main;
import compiler.core.*;
import compiler.analysis.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({ "rawtypes" })
public class Parser extends java_cup.runtime.lr_parser {

	public final Class getSymbolContainer() {
		return sym.class;
	}

	/** Default constructor. */
	@Deprecated
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	@Deprecated
	public Parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\337\000\002\002\004\000\002\002\005\000\002\002"
					+ "\004\000\002\047\005\000\002\046\002\000\002\046\003"
					+ "\000\002\050\003\000\002\050\004\000\002\051\005\000"
					+ "\002\052\005\000\002\052\003\000\002\064\003\000\002"
					+ "\064\003\000\002\120\002\000\002\121\002\000\002\074"
					+ "\014\000\002\076\002\000\002\076\004\000\002\075\011"
					+ "\000\002\073\002\000\002\073\004\000\002\044\002\000"
					+ "\002\044\004\000\002\043\003\000\002\043\003\000\002"
					+ "\043\003\000\002\043\003\000\002\043\003\000\002\043"
					+ "\003\000\002\043\003\000\002\043\003\000\002\043\003"
					+ "\000\002\043\003\000\002\072\003\000\002\072\005\000"
					+ "\002\071\002\000\002\071\004\000\002\100\002\000\002"
					+ "\100\004\000\002\077\003\000\002\077\003\000\002\077"
					+ "\003\000\002\103\003\000\002\103\003\000\002\103\003"
					+ "\000\002\122\002\000\002\102\012\000\002\101\010\000"
					+ "\002\105\006\000\002\107\003\000\002\107\005\000\002"
					+ "\106\005\000\002\113\002\000\002\113\004\000\002\111"
					+ "\002\000\002\111\004\000\002\112\003\000\002\112\005"
					+ "\000\002\110\003\000\002\110\005\000\002\110\003\000"
					+ "\002\011\005\000\002\011\005\000\002\011\004\000\002"
					+ "\011\004\000\002\011\004\000\002\024\006\000\002\012"
					+ "\004\000\002\012\004\000\002\012\004\000\002\012\005"
					+ "\000\002\015\004\000\002\015\005\000\002\017\005\000"
					+ "\002\023\004\000\002\023\005\000\002\023\007\000\002"
					+ "\023\003\000\002\016\006\000\002\020\004\000\002\021"
					+ "\006\000\002\021\005\000\002\021\005\000\002\022\002"
					+ "\000\002\022\005\000\002\031\003\000\002\031\003\000"
					+ "\002\031\003\000\002\031\003\000\002\027\003\000\002"
					+ "\027\003\000\002\014\005\000\002\013\003\000\002\013"
					+ "\003\000\002\013\003\000\002\013\003\000\002\013\003"
					+ "\000\002\013\003\000\002\030\003\000\002\030\003\000"
					+ "\002\030\003\000\002\030\003\000\002\030\003\000\002"
					+ "\030\003\000\002\026\003\000\002\026\003\000\002\026"
					+ "\003\000\002\026\003\000\002\026\003\000\002\026\003"
					+ "\000\002\026\003\000\002\026\003\000\002\026\003\000"
					+ "\002\026\003\000\002\025\003\000\002\025\003\000\002"
					+ "\003\003\000\002\003\003\000\002\003\003\000\002\003"
					+ "\003\000\002\003\003\000\002\003\003\000\002\003\003"
					+ "\000\002\003\003\000\002\003\003\000\002\003\003\000"
					+ "\002\032\003\000\002\032\003\000\002\032\003\000\002"
					+ "\032\003\000\002\032\003\000\002\032\003\000\002\032"
					+ "\003\000\002\032\003\000\002\032\003\000\002\032\003"
					+ "\000\002\032\003\000\002\065\003\000\002\065\005\000"
					+ "\002\104\004\000\002\045\005\000\002\035\002\000\002"
					+ "\035\003\000\002\004\004\000\002\005\002\000\002\005"
					+ "\003\000\002\037\003\000\002\037\004\000\002\037\003"
					+ "\000\002\037\003\000\002\037\003\000\002\037\003\000"
					+ "\002\037\003\000\002\037\003\000\002\037\003\000\002"
					+ "\037\007\000\002\037\005\000\002\037\005\000\002\037"
					+ "\005\000\002\037\005\000\002\037\005\000\002\037\003"
					+ "\000\002\066\006\000\002\067\002\000\002\067\010\000"
					+ "\002\070\002\000\002\070\004\000\002\057\010\000\002"
					+ "\060\002\000\002\060\004\000\002\056\007\000\002\061"
					+ "\011\000\002\062\002\000\002\062\004\000\002\063\005"
					+ "\000\002\063\004\000\002\063\003\000\002\042\011\000"
					+ "\002\040\004\000\002\040\005\000\002\041\003\000\002"
					+ "\041\004\000\002\053\011\000\002\053\007\000\002\053"
					+ "\006\000\002\053\010\000\002\054\005\000\002\055\002"
					+ "\000\002\055\003\000\002\055\004\000\002\055\003\000"
					+ "\002\007\002\000\002\007\003\000\002\036\003\000\002"
					+ "\036\003\000\002\116\005\000\002\114\002\000\002\114"
					+ "\003\000\002\115\003\000\002\115\005\000\002\117\002"
					+ "\000\002\117\003\000\002\010\003\000\002\010\005\000"
					+ "\002\006\003\000\002\006\003\000\002\006\003\000\002"
					+ "\006\003\000\002\006\003\000\002\006\003\000\002\006"
					+ "\003\000\002\006\003\000\002\006\003\000\002\006\003"
					+ "\000\002\006\003\000\002\006\003\000\002\006\003\000"
					+ "\002\006\003\000\002\006\005\000\002\006\004\000\002"
					+ "\033\004\000\002\034\002\000\002\034\004" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\u015f\000\004\040\006\001\ufffd\000\030\004\016\023"
					+ "\034\030\035\035\023\041\030\042\025\043\020\046\017"
					+ "\051\032\053\024\055\026\001\002\000\002\001\ufffc\000"
					+ "\004\142\012\001\002\000\004\002\010\001\002\000\002"
					+ "\001\001\000\006\067\013\071\014\001\002\000\002\001"
					+ "\uff78\000\002\001\ufffe\000\004\142\015\001\002\000\002"
					+ "\001\uff77\000\002\001\uffe3\000\002\001\uffe7\000\002\001"
					+ "\uffea\000\004\030\035\001\ufffb\000\006\013\046\032\045"
					+ "\001\002\000\002\001\uffe5\000\002\001\uffe2\000\002\001"
					+ "\uffe8\000\002\001\uffe1\000\002\001\uffff\000\002\001\uffe9"
					+ "\000\002\001\ufff5\000\002\001\uffe4\000\026\004\016\023"
					+ "\034\035\023\041\030\042\025\043\020\046\017\051\032"
					+ "\053\024\055\026\001\002\000\002\001\uffe6\000\004\142"
					+ "\012\001\002\000\002\001\ufff6\000\004\071\042\001\ufff7"
					+ "\000\004\067\041\001\002\000\002\001\ufff9\000\006\075"
					+ "\043\142\015\001\002\000\002\001\ufff8\000\002\001\000"
					+ "\000\004\142\u015a\001\002\000\004\142\047\001\002\000"
					+ "\002\001\ufff4\000\004\021\051\001\uffee\000\004\142\012"
					+ "\001\002\000\002\001\ufff3\000\004\027\055\001\uffde\000"
					+ "\004\063\062\001\002\000\004\142\012\001\002\000\002"
					+ "\001\uffdd\000\006\070\060\071\014\001\uffe0\000\004\027"
					+ "\055\001\uffde\000\002\001\uffdf\000\002\001\uffdc\000\010"
					+ "\046\064\064\073\067\070\001\uffec\000\004\063\133\001"
					+ "\002\000\002\001\uffd6\000\002\001\uffd7\000\002\001\uffd9"
					+ "\000\002\001\uffd8\000\002\001\uffdb\000\052\004\016\005"
					+ "\107\007\103\012\102\016\113\023\034\024\110\033\101"
					+ "\034\077\035\023\041\030\042\025\043\020\045\111\046"
					+ "\017\051\032\053\024\055\026\057\112\142\106\001\002"
					+ "\000\002\001\ufff2\000\002\001\uffd5\000\002\001\uffda\000"
					+ "\002\001\uffeb\000\002\001\uff87\000\004\065\125\001\uff24"
					+ "\000\002\001\uff89\000\002\001\uff8b\000\002\001\uff8c\000"
					+ "\004\142\u014f\001\002\000\004\071\014\001\uff84\000\004"
					+ "\061\114\001\uff78\000\002\001\uff8d\000\002\001\uff88\000"
					+ "\002\001\uff8a\000\002\001\uff85\000\002\001\uff86\000\026"
					+ "\005\107\007\103\012\102\016\113\024\110\033\101\034"
					+ "\077\045\111\057\112\142\012\001\uff3d\000\004\062\131"
					+ "\001\002\000\004\142\123\001\002\000\002\001\uff3b\000"
					+ "\004\070\121\001\uff3c\000\026\005\107\007\103\012\102"
					+ "\016\113\024\110\033\101\034\077\045\111\057\112\142"
					+ "\012\001\002\000\002\001\uff3a\000\004\065\125\001\uff24"
					+ "\000\004\065\125\001\uff24\000\004\066\127\001\002\000"
					+ "\002\001\uff3e\000\002\001\uff25\000\002\001\uff23\000\004"
					+ "\063\133\001\002\000\002\001\uffd2\000\076\006\200\014"
					+ "\143\017\213\025\146\026\164\036\173\037\163\044\170"
					+ "\047\172\050\203\051\212\052\165\054\157\056\177\060"
					+ "\207\061\142\063\133\064\211\067\153\074\145\077\136"
					+ "\104\171\113\161\125\152\137\151\140\137\141\150\142"
					+ "\220\143\217\144\205\001\uffec\000\002\001\uff32\000\002"
					+ "\001\uff34\000\002\001\uff8f\000\002\001\uffa2\000\002\001"
					+ "\uff67\000\044\036\173\037\163\047\172\052\165\061\142"
					+ "\067\u0142\074\145\077\136\104\171\113\161\125\152\137"
					+ "\151\140\137\141\150\142\225\143\217\144\205\001\002"
					+ "\000\064\005\107\007\103\012\102\016\113\024\110\033"
					+ "\101\034\077\036\173\037\163\045\111\047\172\052\165"
					+ "\057\112\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\u013d\143\217\144\205"
					+ "\001\002\000\004\142\364\001\uff71\000\042\036\173\037"
					+ "\163\047\172\052\165\061\142\074\145\077\136\104\171"
					+ "\113\161\125\152\137\151\140\137\141\150\142\225\143"
					+ "\217\144\205\001\002\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\004\061\u0132\001\002\000\002\001\uff69\000"
					+ "\002\001\uffb4\000\002\001\uffa1\000\042\036\173\037\163"
					+ "\047\172\052\165\061\142\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\225\143\217"
					+ "\144\205\001\002\000\002\001\uff60\000\002\001\uff6f\000"
					+ "\002\001\uff6c\000\002\001\uff33\000\042\036\173\037\163"
					+ "\047\172\052\165\061\142\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\225\143\217"
					+ "\144\205\001\002\000\002\001\uff6d\000\042\036\173\037"
					+ "\163\047\172\052\165\061\142\074\145\077\136\104\171"
					+ "\113\161\125\152\137\151\140\137\141\150\142\225\143"
					+ "\217\144\205\001\002\000\002\001\uff30\000\002\001\uffa0"
					+ "\000\004\061\u0127\001\002\000\002\001\uff2b\000\116\031"
					+ "\246\061\242\065\273\067\u0126\070\255\071\264\073\263"
					+ "\074\245\075\235\076\256\077\136\100\260\101\261\102"
					+ "\271\103\232\104\171\105\272\106\237\107\275\110\302"
					+ "\111\243\114\270\115\233\116\236\117\253\120\277\121"
					+ "\250\122\276\123\257\124\251\126\300\127\254\130\303"
					+ "\131\267\132\240\133\265\134\262\136\274\001\002\000"
					+ "\002\001\uff4d\000\042\036\173\037\163\047\172\052\165"
					+ "\061\142\074\145\077\136\104\171\113\161\125\152\137"
					+ "\151\140\137\141\150\142\225\143\217\144\205\001\uff42"
					+ "\000\002\001\uff8e\000\002\001\uff2c\000\030\005\107\007"
					+ "\103\012\102\016\113\024\110\033\101\034\077\045\111"
					+ "\057\112\061\u0117\142\012\001\002\000\052\004\016\005"
					+ "\107\007\103\012\102\016\113\023\034\024\110\033\101"
					+ "\034\077\035\023\041\030\042\025\043\020\045\111\046"
					+ "\017\051\032\053\024\055\026\057\112\142\012\001\002"
					+ "\000\002\001\uff31\000\002\001\uff6b\000\074\006\200\014"
					+ "\143\017\213\025\146\026\164\036\173\037\163\044\170"
					+ "\047\172\050\203\051\212\052\165\054\157\056\177\060"
					+ "\207\061\142\063\133\067\153\074\145\077\136\104\171"
					+ "\113\161\125\152\137\151\140\137\141\150\142\220\143"
					+ "\217\144\205\001\uffec\000\004\142\364\001\uff71\000\002"
					+ "\001\uff2e\000\076\006\200\014\143\017\213\025\146\026"
					+ "\164\036\173\037\163\044\170\047\172\050\203\051\212"
					+ "\052\165\054\157\056\177\060\207\061\142\063\133\064"
					+ "\362\067\153\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\220\143\217\144\205\001"
					+ "\uffec\000\004\061\344\001\002\000\002\001\uff29\000\002"
					+ "\001\uffa4\000\002\001\uff6a\000\004\061\340\001\002\000"
					+ "\002\001\uff68\000\002\001\uff4f\000\004\061\334\001\002"
					+ "\000\074\006\200\014\143\017\213\025\146\026\164\036"
					+ "\173\037\163\044\170\047\172\050\203\051\212\052\165"
					+ "\054\157\056\177\060\207\061\142\063\133\067\153\074"
					+ "\145\077\136\104\171\113\161\125\152\137\151\140\137"
					+ "\141\150\142\220\143\217\144\205\001\uffec\000\002\001"
					+ "\uff28\000\002\001\uff35\000\002\001\uff2f\000\002\001\uffa5"
					+ "\000\006\072\221\112\222\001\uff2a\000\042\036\173\037"
					+ "\163\047\172\052\165\061\142\074\145\077\136\104\171"
					+ "\113\161\125\152\137\151\140\137\141\150\142\225\143"
					+ "\217\144\205\001\002\000\074\006\200\014\143\017\213"
					+ "\025\146\026\164\036\173\037\163\044\170\047\172\050"
					+ "\203\051\212\052\165\054\157\056\177\060\207\061\142"
					+ "\063\133\067\153\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\220\143\217\144\205"
					+ "\001\uffec\000\042\036\173\037\163\047\172\052\165\061"
					+ "\142\074\145\077\136\104\171\113\161\125\152\137\151"
					+ "\140\137\141\150\142\225\143\217\144\205\001\uff39\000"
					+ "\004\062\323\001\002\000\004\072\221\001\uff2a\000\114"
					+ "\031\246\061\242\065\273\070\255\071\264\073\263\074"
					+ "\245\075\235\076\256\077\136\100\260\101\261\102\271"
					+ "\103\232\104\171\105\272\106\237\107\275\110\302\111"
					+ "\243\114\270\115\233\116\236\117\253\120\277\121\250"
					+ "\122\276\123\257\124\251\126\300\127\254\130\303\131"
					+ "\267\132\240\133\265\134\262\136\274\001\uff37\000\004"
					+ "\070\230\001\uff38\000\042\036\173\037\163\047\172\052"
					+ "\165\061\142\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\225\143\217\144\205\001"
					+ "\002\000\112\031\246\061\242\065\273\071\264\073\263"
					+ "\074\245\075\235\076\256\077\136\100\260\101\261\102"
					+ "\271\103\232\104\171\105\272\106\237\107\275\110\302"
					+ "\111\243\114\270\115\233\116\236\117\253\120\277\121"
					+ "\250\122\276\123\257\124\251\126\300\127\254\130\303"
					+ "\131\267\132\240\133\265\134\262\136\274\001\uff36\000"
					+ "\002\001\uff92\000\002\001\uff9c\000\042\036\173\037\163"
					+ "\047\172\052\165\061\142\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\225\143\217"
					+ "\144\205\001\002\000\002\001\uff95\000\002\001\uff9d\000"
					+ "\002\001\uff90\000\002\001\uff7e\000\042\036\173\037\163"
					+ "\047\172\052\165\061\142\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\225\143\217"
					+ "\144\205\001\002\000\042\036\173\037\163\047\172\052"
					+ "\165\061\142\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\225\143\217\144\205\001"
					+ "\uff39\000\002\001\uffa9\000\002\001\uffbc\000\002\001\uff97"
					+ "\000\004\142\012\001\002\000\002\001\uff26\000\002\001"
					+ "\uff80\000\002\001\uff83\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\002\001\uff9f\000\002\001\uff81\000\042\036"
					+ "\173\037\163\047\172\052\165\061\142\074\145\077\136"
					+ "\104\171\113\161\125\152\137\151\140\137\141\150\142"
					+ "\225\143\217\144\205\001\002\000\002\001\uff93\000\002"
					+ "\001\uff7c\000\002\001\uffa7\000\002\001\uff96\000\002\001"
					+ "\uffac\000\002\001\uffa8\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\002\001\uff7d\000\042\036\173\037\163\047"
					+ "\172\052\165\061\142\074\145\077\136\104\171\113\161"
					+ "\125\152\137\151\140\137\141\150\142\225\143\217\144"
					+ "\205\001\002\000\002\001\uff7f\000\002\001\uff9b\000\002"
					+ "\001\uff94\000\002\001\uff91\000\042\036\173\037\163\047"
					+ "\172\052\165\061\142\074\145\077\136\104\171\113\161"
					+ "\125\152\137\151\140\137\141\150\142\225\143\217\144"
					+ "\205\001\002\000\042\036\173\037\163\047\172\052\165"
					+ "\061\142\074\145\077\136\104\171\113\161\125\152\137"
					+ "\151\140\137\141\150\142\225\143\217\144\205\001\002"
					+ "\000\002\001\uffab\000\002\001\uff7b\000\002\001\uff9e\000"
					+ "\002\001\uff9a\000\042\036\173\037\163\047\172\052\165"
					+ "\061\142\074\145\077\136\104\171\113\161\125\152\137"
					+ "\151\140\137\141\150\142\225\143\217\144\205\001\002"
					+ "\000\002\001\uffaa\000\002\001\uff82\000\114\031\246\061"
					+ "\242\065\273\070\255\071\264\073\263\074\245\075\235"
					+ "\076\256\077\136\100\260\101\261\102\271\103\232\104"
					+ "\171\105\272\106\237\107\275\110\302\111\243\114\270"
					+ "\115\233\116\236\117\253\120\277\121\250\122\276\123"
					+ "\257\124\251\126\300\127\254\130\303\131\267\132\240"
					+ "\133\265\134\262\136\274\001\uffbb\000\116\031\246\061"
					+ "\242\065\273\070\255\071\264\073\263\074\245\075\235"
					+ "\076\256\077\136\100\260\101\261\102\271\103\232\104"
					+ "\171\105\272\106\237\107\275\110\302\111\243\112\306"
					+ "\114\270\115\233\116\236\117\253\120\277\121\250\122"
					+ "\276\123\257\124\251\126\300\127\254\130\303\131\267"
					+ "\132\240\133\265\134\262\136\274\001\002\000\042\036"
					+ "\173\037\163\047\172\052\165\061\142\074\145\077\136"
					+ "\104\171\113\161\125\152\137\151\140\137\141\150\142"
					+ "\225\143\217\144\205\001\002\000\114\031\246\061\242"
					+ "\065\273\070\255\071\264\073\263\074\245\075\235\076"
					+ "\256\077\136\100\260\101\261\102\271\103\232\104\171"
					+ "\105\272\106\237\107\275\110\302\111\243\114\270\115"
					+ "\233\116\236\117\253\120\277\121\250\122\276\123\257"
					+ "\124\251\126\300\127\254\130\303\131\267\132\240\133"
					+ "\265\134\262\136\274\001\uffb5\000\116\031\246\061\242"
					+ "\065\273\066\311\070\255\071\264\073\263\074\245\075"
					+ "\235\076\256\077\136\100\260\101\261\102\271\103\232"
					+ "\104\171\105\272\106\237\107\275\110\302\111\243\114"
					+ "\270\115\233\116\236\117\253\120\277\121\250\122\276"
					+ "\123\257\124\251\126\300\127\254\130\303\131\267\132"
					+ "\240\133\265\134\262\136\274\001\002\000\002\001\uffc3"
					+ "\000\114\031\246\061\242\065\273\070\255\071\264\073"
					+ "\263\074\245\075\235\076\256\077\136\100\260\101\261"
					+ "\102\271\103\232\104\171\105\272\106\237\107\275\110"
					+ "\302\111\243\114\270\115\233\116\236\117\253\120\277"
					+ "\121\250\122\276\123\257\124\251\126\300\127\254\130"
					+ "\303\131\267\132\240\133\265\134\262\136\274\001\uffb6"
					+ "\000\022\123\257\124\251\127\254\130\303\131\267\132"
					+ "\240\133\265\136\274\001\uffc2\000\104\061\242\065\273"
					+ "\071\264\073\263\074\245\075\235\076\256\077\136\100"
					+ "\260\101\261\102\271\103\232\104\171\105\272\106\237"
					+ "\107\275\110\302\111\243\114\270\115\233\116\236\117"
					+ "\253\120\277\123\257\124\251\126\300\127\254\130\303"
					+ "\131\267\132\240\133\265\134\262\136\274\001\uffc1\000"
					+ "\114\031\246\061\242\065\273\070\255\071\264\073\263"
					+ "\074\245\075\235\076\256\077\136\100\260\101\261\102"
					+ "\271\103\232\104\171\105\272\106\237\107\275\110\302"
					+ "\111\243\114\270\115\233\116\236\117\253\120\277\121"
					+ "\250\122\276\123\257\124\251\126\300\127\254\130\303"
					+ "\131\267\132\240\133\265\134\262\136\274\001\uffa6\000"
					+ "\004\071\014\001\uffc0\000\004\062\320\001\002\000\002"
					+ "\001\uffc4\000\114\031\246\061\242\065\273\070\255\071"
					+ "\264\073\263\074\245\075\235\076\256\077\136\100\260"
					+ "\101\261\102\271\103\232\104\171\105\272\106\237\107"
					+ "\275\110\302\111\243\114\270\115\233\116\236\117\253"
					+ "\120\277\121\250\122\276\123\257\124\251\126\300\127"
					+ "\254\130\303\131\267\132\240\133\265\134\262\136\274"
					+ "\001\uffb8\000\114\031\246\061\242\065\273\070\255\071"
					+ "\264\073\263\074\245\075\235\076\256\077\136\100\260"
					+ "\101\261\102\271\103\232\104\171\105\272\106\237\107"
					+ "\275\110\302\111\243\114\270\115\233\116\236\117\253"
					+ "\120\277\121\250\122\276\123\257\124\251\126\300\127"
					+ "\254\130\303\131\267\132\240\133\265\134\262\136\274"
					+ "\001\uffb9\000\002\001\uffbf\000\002\001\uff63\000\114\031"
					+ "\246\061\242\065\273\070\255\071\264\073\263\074\245"
					+ "\075\235\076\256\077\136\100\260\101\261\102\271\103"
					+ "\232\104\171\105\272\106\237\107\275\110\302\111\243"
					+ "\114\270\115\233\116\236\117\253\120\277\121\250\122"
					+ "\276\123\257\124\251\126\300\127\254\130\303\131\267"
					+ "\132\240\133\265\134\262\136\274\001\uff75\000\004\060"
					+ "\327\001\002\000\004\061\330\001\002\000\042\036\173"
					+ "\037\163\047\172\052\165\061\142\074\145\077\136\104"
					+ "\171\113\161\125\152\137\151\140\137\141\150\142\225"
					+ "\143\217\144\205\001\002\000\116\031\246\061\242\062"
					+ "\332\065\273\070\255\071\264\073\263\074\245\075\235"
					+ "\076\256\077\136\100\260\101\261\102\271\103\232\104"
					+ "\171\105\272\106\237\107\275\110\302\111\243\114\270"
					+ "\115\233\116\236\117\253\120\277\121\250\122\276\123"
					+ "\257\124\251\126\300\127\254\130\303\131\267\132\240"
					+ "\133\265\134\262\136\274\001\002\000\004\067\333\001"
					+ "\002\000\002\001\uff50\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\116\031\246\061\242\062\336\065\273\070"
					+ "\255\071\264\073\263\074\245\075\235\076\256\077\136"
					+ "\100\260\101\261\102\271\103\232\104\171\105\272\106"
					+ "\237\107\275\110\302\111\243\114\270\115\233\116\236"
					+ "\117\253\120\277\121\250\122\276\123\257\124\251\126"
					+ "\300\127\254\130\303\131\267\132\240\133\265\134\262"
					+ "\136\274\001\002\000\074\006\200\014\143\017\213\025"
					+ "\146\026\164\036\173\037\163\044\170\047\172\050\203"
					+ "\051\212\052\165\054\157\056\177\060\207\061\142\063"
					+ "\133\067\153\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\220\143\217\144\205\001"
					+ "\uffec\000\002\001\uff66\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\116\031\246\061\242\062\342\065\273\070"
					+ "\255\071\264\073\263\074\245\075\235\076\256\077\136"
					+ "\100\260\101\261\102\271\103\232\104\171\105\272\106"
					+ "\237\107\275\110\302\111\243\114\270\115\233\116\236"
					+ "\117\253\120\277\121\250\122\276\123\257\124\251\126"
					+ "\300\127\254\130\303\131\267\132\240\133\265\134\262"
					+ "\136\274\001\002\000\074\006\200\014\143\017\213\025"
					+ "\146\026\164\036\173\037\163\044\170\047\172\050\203"
					+ "\051\212\052\165\054\157\056\177\060\207\061\142\063"
					+ "\133\067\153\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\220\143\217\144\205\001"
					+ "\uffec\000\002\001\uff57\000\042\036\173\037\163\047\172"
					+ "\052\165\061\142\074\145\077\136\104\171\113\161\125"
					+ "\152\137\151\140\137\141\150\142\225\143\217\144\205"
					+ "\001\002\000\116\031\246\061\242\062\346\065\273\070"
					+ "\255\071\264\073\263\074\245\075\235\076\256\077\136"
					+ "\100\260\101\261\102\271\103\232\104\171\105\272\106"
					+ "\237\107\275\110\302\111\243\114\270\115\233\116\236"
					+ "\117\253\120\277\121\250\122\276\123\257\124\251\126"
					+ "\300\127\254\130\303\131\267\132\240\133\265\134\262"
					+ "\136\274\001\002\000\004\063\347\001\002\000\002\001"
					+ "\uff55\000\102\006\200\010\351\014\143\015\353\017\213"
					+ "\025\146\026\164\036\173\037\163\044\170\047\172\050"
					+ "\203\051\212\052\165\054\157\056\177\060\207\061\142"
					+ "\063\133\064\354\067\153\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\220\143\217"
					+ "\144\205\001\uffec\000\042\036\173\037\163\047\172\052"
					+ "\165\061\142\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\225\143\217\144\205\001"
					+ "\002\000\002\001\uff51\000\004\112\356\001\002\000\002"
					+ "\001\uff56\000\002\001\uff54\000\002\001\uff52\000\116\031"
					+ "\246\061\242\065\273\070\255\071\264\073\263\074\245"
					+ "\075\235\076\256\077\136\100\260\101\261\102\271\103"
					+ "\232\104\171\105\272\106\237\107\275\110\302\111\243"
					+ "\112\360\114\270\115\233\116\236\117\253\120\277\121"
					+ "\250\122\276\123\257\124\251\126\300\127\254\130\303"
					+ "\131\267\132\240\133\265\134\262\136\274\001\002\000"
					+ "\002\001\uff53\000\002\001\uff4c\000\002\001\uff4e\000\004"
					+ "\067\365\001\002\000\002\001\uff70\000\002\001\uff62\000"
					+ "\002\001\uff5e\000\006\011\372\022\371\001\uff5c\000\002"
					+ "\001\uff5f\000\074\006\200\014\143\017\213\025\146\026"
					+ "\164\036\173\037\163\044\170\047\172\050\203\051\212"
					+ "\052\165\054\157\056\177\060\207\061\142\063\133\067"
					+ "\153\074\145\077\136\104\171\113\161\125\152\137\151"
					+ "\140\137\141\150\142\220\143\217\144\205\001\uffec\000"
					+ "\004\061\373\001\002\000\026\005\107\007\103\012\102"
					+ "\016\113\024\110\033\101\034\077\045\111\057\112\142"
					+ "\012\001\002\000\004\062\375\001\002\000\074\006\200"
					+ "\014\143\017\213\025\146\026\164\036\173\037\163\044"
					+ "\170\047\172\050\203\051\212\052\165\054\157\056\177"
					+ "\060\207\061\142\063\133\067\153\074\145\077\136\104"
					+ "\171\113\161\125\152\137\151\140\137\141\150\142\220"
					+ "\143\217\144\205\001\uffec\000\002\001\uff5d\000\002\001"
					+ "\uff5b\000\004\142\u0103\001\002\000\004\067\u0114\001\002"
					+ "\000\004\070\u0112\001\uffd0\000\004\065\125\001\uff24\000"
					+ "\004\072\u0105\001\uffcd\000\044\036\173\037\163\047\172"
					+ "\052\165\061\142\063\u0108\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\u0107\143\217"
					+ "\144\205\001\002\000\002\001\uffce\000\012\064\uffc5\067"
					+ "\uffc5\070\uffc5\072\221\001\uff2a\000\044\036\173\037\163"
					+ "\047\172\052\165\061\142\063\u0108\074\145\077\136\104"
					+ "\171\113\161\125\152\137\151\140\137\141\150\142\u0107"
					+ "\143\217\144\205\001\uffcb\000\114\031\246\061\242\065"
					+ "\273\070\255\071\264\073\263\074\245\075\235\076\256"
					+ "\077\136\100\260\101\261\102\271\103\232\104\171\105"
					+ "\272\106\237\107\275\110\302\111\243\114\270\115\233"
					+ "\116\236\117\253\120\277\121\250\122\276\123\257\124"
					+ "\251\126\300\127\254\130\303\131\267\132\240\133\265"
					+ "\134\262\136\274\001\uffc7\000\002\001\uffcc\000\004\070"
					+ "\u010f\001\uff74\000\002\001\uffc9\000\004\064\u010e\001\002"
					+ "\000\002\001\uffc6\000\044\036\173\037\163\047\172\052"
					+ "\165\061\142\063\u0108\074\145\077\136\104\171\113\161"
					+ "\125\152\137\151\140\137\141\150\142\u0107\143\217\144"
					+ "\205\001\uff73\000\002\001\uffca\000\002\001\uffc8\000\004"
					+ "\142\u0103\001\002\000\002\001\uffcf\000\002\001\uffd1\000"
					+ "\004\061\u011f\001\uffae\000\002\001\uffb2\000\042\036\173"
					+ "\037\163\047\172\052\165\061\142\074\145\077\136\104"
					+ "\171\113\161\125\152\137\151\140\137\141\150\142\225"
					+ "\143\217\144\205\001\002\000\006\061\u0119\071\014\001"
					+ "\uff84\000\042\036\173\037\163\047\172\052\165\061\142"
					+ "\074\145\077\136\104\171\113\161\125\152\137\151\140"
					+ "\137\141\150\142\225\143\217\144\205\001\uff39\000\004"
					+ "\062\u011b\001\002\000\002\001\uffb1\000\116\031\246\061"
					+ "\242\062\u011d\065\273\070\255\071\264\073\263\074\245"
					+ "\075\235\076\256\077\136\100\260\101\261\102\271\103"
					+ "\232\104\171\105\272\106\237\107\275\110\302\111\243"
					+ "\114\270\115\233\116\236\117\253\120\277\121\250\122"
					+ "\276\123\257\124\251\126\300\127\254\130\303\131\267"
					+ "\132\240\133\265\134\262\136\274\001\002\000\002\001"
					+ "\uffaf\000\004\065\125\001\uff24\000\042\036\173\037\163"
					+ "\047\172\052\165\061\142\074\145\077\136\104\171\113"
					+ "\161\125\152\137\151\140\137\141\150\142\225\143\217"
					+ "\144\205\001\002\000\116\031\246\061\242\062\u0121\065"
					+ "\273\070\255\071\264\073\263\074\245\075\235\076\256"
					+ "\077\136\100\260\101\261\102\271\103\232\104\171\105"
					+ "\272\106\237\107\275\110\302\111\243\114\270\115\233"
					+ "\116\236\117\253\120\277\121\250\122\276\123\257\124"
					+ "\251\126\300\127\254\130\303\131\267\132\240\133\265"
					+ "\134\262\136\274\001\002\000\002\001\uffad\000\002\001"
					+ "\uffb0\000\004\067\u0125\001\002\000\114\031\246\061\242"
					+ "\065\273\070\255\071\264\073\263\074\245\075\235\076"
					+ "\256\077\136\100\260\101\261\102\271\103\232\104\171"
					+ "\105\272\106\237\107\275\110\302\111\243\114\270\115"
					+ "\233\116\236\117\253\120\277\121\250\122\276\123\257"
					+ "\124\251\126\300\127\254\130\303\131\267\132\240\133"
					+ "\265\134\262\136\274\001\uff41\000\002\001\uff65\000\002"
					+ "\001\uff6e\000\042\036\173\037\163\047\172\052\165\061"
					+ "\142\074\145\077\136\104\171\113\161\125\152\137\151"
					+ "\140\137\141\150\142\225\143\217\144\205\001\002\000"
					+ "\116\031\246\061\242\062\u0129\065\273\070\255\071\264"
					+ "\073\263\074\245\075\235\076\256\077\136\100\260\101"
					+ "\261\102\271\103\232\104\171\105\272\106\237\107\275"
					+ "\110\302\111\243\114\270\115\233\116\236\117\253\120"
					+ "\277\121\250\122\276\123\257\124\251\126\300\127\254"
					+ "\130\303\131\267\132\240\133\265\134\262\136\274\001"
					+ "\002\000\074\006\200\014\143\017\213\025\146\026\164"
					+ "\036\173\037\163\044\170\047\172\050\203\051\212\052"
					+ "\165\054\157\056\177\060\207\061\142\063\133\067\153"
					+ "\074\145\077\136\104\171\113\161\125\152\137\151\140"
					+ "\137\141\150\142\220\143\217\144\205\001\uffec\000\004"
					+ "\020\u012b\001\uff59\000\074\006\200\014\143\017\213\025"
					+ "\146\026\164\036\173\037\163\044\170\047\172\050\203"
					+ "\051\212\052\165\054\157\056\177\060\207\061\142\063"
					+ "\133\067\153\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\220\143\217\144\205\001"
					+ "\uffec\000\002\001\uff5a\000\002\001\uff58\000\114\031\246"
					+ "\061\242\065\273\070\255\071\264\073\263\074\245\075"
					+ "\235\076\256\077\136\100\260\101\261\102\271\103\232"
					+ "\104\171\105\272\106\237\107\275\110\302\111\243\114"
					+ "\270\115\233\116\236\117\253\120\277\121\250\122\276"
					+ "\123\257\124\251\126\300\127\254\130\303\131\267\132"
					+ "\240\133\265\134\262\136\274\001\uffba\000\116\031\246"
					+ "\061\242\065\273\067\u0130\070\255\071\264\073\263\074"
					+ "\245\075\235\076\256\077\136\100\260\101\261\102\271"
					+ "\103\232\104\171\105\272\106\237\107\275\110\302\111"
					+ "\243\114\270\115\233\116\236\117\253\120\277\121\250"
					+ "\122\276\123\257\124\251\126\300\127\254\130\303\131"
					+ "\267\132\240\133\265\134\262\136\274\001\002\000\002"
					+ "\001\uff64\000\114\031\246\061\242\065\273\070\255\071"
					+ "\264\073\263\074\245\075\235\076\256\077\136\100\260"
					+ "\101\261\102\271\103\232\104\171\105\272\106\237\107"
					+ "\275\110\302\111\243\114\270\115\233\116\236\117\253"
					+ "\120\277\121\250\122\276\123\257\124\251\126\300\127"
					+ "\254\130\303\131\267\132\240\133\265\134\262\136\274"
					+ "\001\uffb7\000\044\036\173\037\163\047\172\052\165\061"
					+ "\142\067\u0133\074\145\077\136\104\171\113\161\125\152"
					+ "\137\151\140\137\141\150\142\225\143\217\144\205\001"
					+ "\uffec\000\002\001\uff43\000\002\001\uff47\000\004\067\u0137"
					+ "\001\002\000\002\001\uff45\000\002\001\uff44\000\060\071"
					+ "\264\075\235\076\256\077\136\104\171\107\275\110\302"
					+ "\111\243\114\270\115\233\116\236\117\253\120\277\123"
					+ "\257\124\251\126\300\127\254\130\303\131\267\132\240"
					+ "\133\265\134\262\136\274\001\uffbe\000\114\031\246\061"
					+ "\242\065\273\070\255\071\264\073\263\074\245\075\235"
					+ "\076\256\077\136\100\260\101\261\102\271\103\232\104"
					+ "\171\105\272\106\237\107\275\110\302\111\243\114\270"
					+ "\115\233\116\236\117\253\120\277\121\250\122\276\123"
					+ "\257\124\251\126\300\127\254\130\303\131\267\132\240"
					+ "\133\265\134\262\136\274\001\uffbd\000\004\067\u013b\001"
					+ "\002\000\002\001\uff61\000\116\031\246\061\242\062\u0141"
					+ "\065\273\070\255\071\264\073\263\074\245\075\235\076"
					+ "\256\077\136\100\260\101\261\102\271\103\232\104\171"
					+ "\105\272\106\237\107\275\110\302\111\243\114\270\115"
					+ "\233\116\236\117\253\120\277\121\250\122\276\123\257"
					+ "\124\251\126\300\127\254\130\303\131\267\132\240\133"
					+ "\265\134\262\136\274\001\002\000\012\062\uff78\065\uff78"
					+ "\071\uff78\072\221\001\uff2a\000\004\062\u013f\001\002\000"
					+ "\042\036\173\037\163\047\172\052\165\061\142\074\145"
					+ "\077\136\104\171\113\161\125\152\137\151\140\137\141"
					+ "\150\142\225\143\217\144\205\001\002\000\104\061\242"
					+ "\065\273\071\264\073\263\074\245\075\235\076\256\077"
					+ "\136\100\260\101\261\102\271\103\232\104\171\105\272"
					+ "\106\237\107\275\110\302\111\243\114\270\115\233\116"
					+ "\236\117\253\120\277\123\257\124\251\126\300\127\254"
					+ "\130\303\131\267\132\240\133\265\134\262\136\274\001"
					+ "\uffb3\000\002\001\uff27\000\004\062\u014d\001\002\000\116"
					+ "\031\246\061\242\065\273\067\u0144\070\255\071\264\073"
					+ "\263\074\245\075\235\076\256\077\136\100\260\101\261"
					+ "\102\271\103\232\104\171\105\272\106\237\107\275\110"
					+ "\302\111\243\114\270\115\233\116\236\117\253\120\277"
					+ "\121\250\122\276\123\257\124\251\126\300\127\254\130"
					+ "\303\131\267\132\240\133\265\134\262\136\274\001\002"
					+ "\000\044\036\173\037\163\047\172\052\165\061\142\062"
					+ "\u0145\074\145\077\136\104\171\113\161\125\152\137\151"
					+ "\140\137\141\150\142\225\143\217\144\205\001\002\000"
					+ "\074\006\200\014\143\017\213\025\146\026\164\036\173"
					+ "\037\163\044\170\047\172\050\203\051\212\052\165\054"
					+ "\157\056\177\060\207\061\142\063\133\067\153\074\145"
					+ "\077\136\104\171\113\161\125\152\137\151\140\137\141"
					+ "\150\142\220\143\217\144\205\001\uffec\000\120\031\246"
					+ "\061\242\062\u0147\065\273\067\u0148\070\255\071\264\073"
					+ "\263\074\245\075\235\076\256\077\136\100\260\101\261"
					+ "\102\271\103\232\104\171\105\272\106\237\107\275\110"
					+ "\302\111\243\114\270\115\233\116\236\117\253\120\277"
					+ "\121\250\122\276\123\257\124\251\126\300\127\254\130"
					+ "\303\131\267\132\240\133\265\134\262\136\274\001\002"
					+ "\000\074\006\200\014\143\017\213\025\146\026\164\036"
					+ "\173\037\163\044\170\047\172\050\203\051\212\052\165"
					+ "\054\157\056\177\060\207\061\142\063\133\067\153\074"
					+ "\145\077\136\104\171\113\161\125\152\137\151\140\137"
					+ "\141\150\142\220\143\217\144\205\001\uffec\000\004\062"
					+ "\u0149\001\002\000\074\006\200\014\143\017\213\025\146"
					+ "\026\164\036\173\037\163\044\170\047\172\050\203\051"
					+ "\212\052\165\054\157\056\177\060\207\061\142\063\133"
					+ "\067\153\074\145\077\136\104\171\113\161\125\152\137"
					+ "\151\140\137\141\150\142\220\143\217\144\205\001\uffec"
					+ "\000\002\001\uff4b\000\002\001\uff48\000\002\001\uff4a\000"
					+ "\074\006\200\014\143\017\213\025\146\026\164\036\173"
					+ "\037\163\044\170\047\172\050\203\051\212\052\165\054"
					+ "\157\056\177\060\207\061\142\063\133\067\153\074\145"
					+ "\077\136\104\171\113\161\125\152\137\151\140\137\141"
					+ "\150\142\220\143\217\144\205\001\uffec\000\002\001\uff49"
					+ "\000\006\061\u0150\065\125\001\uff24\000\026\005\107\007"
					+ "\103\012\102\016\113\024\110\033\101\034\077\045\111"
					+ "\057\112\142\012\001\uff3d\000\004\062\u0152\001\002\000"
					+ "\002\001\uffd4\000\006\063\133\067\u0155\001\002\000\002"
					+ "\001\uff40\000\002\001\uff3f\000\002\001\uffd3\000\002\001"
					+ "\uff72\000\002\001\uff76\000\004\071\014\001\uffed\000\004"
					+ "\021\u015b\001\ufff1\000\004\142\012\001\002\000\004\063"
					+ "\u015d\001\002\000\002\001\uffdc\000\010\046\064\064\u015f"
					+ "\067\070\001\uffec\000\002\001\uffef\000\002\001\ufff0\000" + "\002\001\ufffa" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\u015f\000\010\002\006\046\003\047\004\001\001\000"
					+ "\016\043\021\050\032\051\020\064\026\074\035\075\030"
					+ "\001\001\000\002\001\001\000\004\065\010\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\006\050\u0160\051\020\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\012\043\021\064\043\074\035"
					+ "\075\030\001\001\000\002\001\001\000\006\052\037\065"
					+ "\036\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\004\120\047\001\001\000\004\073\051\001\001\000"
					+ "\004\065\u0158\001\001\000\004\121\052\001\001\000\004"
					+ "\071\053\001\001\000\002\001\001\000\006\065\056\072"
					+ "\055\001\001\000\002\001\001\000\002\001\001\000\004"
					+ "\071\060\001\001\000\002\001\001\000\004\100\062\001"
					+ "\001\000\020\044\071\077\070\101\064\102\065\103\074"
					+ "\104\066\105\073\001\001\000\004\040\u0157\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\012\003\077\004\103\043"
					+ "\075\065\104\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\006\033\123\034\u0156\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\006\106\u0101\107\u0100\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\016\003\077\004\115\065\104\114\114"
					+ "\115\117\116\116\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\012\003\077"
					+ "\004\115\065\104\116\121\001\001\000\002\001\001\000"
					+ "\006\033\123\034\125\001\001\000\006\033\123\034\127"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\004\040\131\001\001\000\002"
					+ "\001\001\000\062\006\165\012\214\013\200\014\133\015"
					+ "\174\016\161\017\134\020\215\023\155\024\213\025\143"
					+ "\037\166\040\157\041\201\042\175\044\173\045\203\053"
					+ "\146\054\140\056\205\057\154\061\137\066\207\105\153"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\032\006\u0142"
					+ "\012\214\013\200\014\133\015\174\016\161\017\134\020"
					+ "\215\023\155\024\213\025\143\045\203\001\001\000\040"
					+ "\003\077\004\u013d\006\u013b\012\214\013\200\014\133\015"
					+ "\174\016\161\017\134\020\215\023\155\024\213\025\143"
					+ "\045\203\065\104\001\001\000\004\005\u0139\001\001\000"
					+ "\032\006\u0138\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\032\006\u0137\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\045"
					+ "\203\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\032\006\u0130\012\214\013"
					+ "\200\014\133\015\174\016\161\017\134\020\215\023\155"
					+ "\024\213\025\143\045\203\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\032"
					+ "\006\u012e\012\214\013\200\014\133\015\174\016\161\017"
					+ "\134\020\215\023\155\024\213\025\143\045\203\001\001"
					+ "\000\002\001\001\000\032\006\u012d\012\214\013\200\014"
					+ "\133\015\174\016\161\017\134\020\215\023\155\024\213"
					+ "\025\143\045\203\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\020\011\246"
					+ "\025\243\026\300\027\251\030\240\031\233\032\265\001"
					+ "\001\000\002\001\001\000\034\006\u0123\007\u0122\012\214"
					+ "\013\200\014\133\015\174\016\161\017\134\020\215\023"
					+ "\155\024\213\025\143\045\203\001\001\000\002\001\001"
					+ "\000\002\001\001\000\010\003\u0114\021\u0115\065\u0117\001"
					+ "\001\000\012\003\077\004\377\043\075\065\104\001\001"
					+ "\000\002\001\001\000\002\001\001\000\060\006\165\012"
					+ "\214\013\200\014\133\015\174\016\161\017\134\020\215"
					+ "\023\155\024\213\025\143\037\365\040\157\042\175\044"
					+ "\173\045\203\053\146\054\140\056\205\057\154\061\137"
					+ "\066\207\105\153\001\001\000\004\005\362\001\001\000"
					+ "\002\001\001\000\060\006\165\012\214\013\200\014\133"
					+ "\015\174\016\161\017\134\020\215\023\155\024\213\025"
					+ "\143\037\360\040\157\042\175\044\173\045\203\053\146"
					+ "\054\140\056\205\057\154\061\137\066\207\105\153\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\060\006\165\012\214"
					+ "\013\200\014\133\015\174\016\161\017\134\020\215\023"
					+ "\155\024\213\025\143\037\325\040\157\042\175\044\173"
					+ "\045\203\053\146\054\140\056\205\057\154\061\137\066"
					+ "\207\105\153\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\032\006\324\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\060\006\165\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\037"
					+ "\323\040\157\042\175\044\173\045\203\053\146\054\140"
					+ "\056\205\057\154\061\137\066\207\105\153\001\001\000"
					+ "\036\006\225\010\226\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\045"
					+ "\203\117\223\001\001\000\002\001\001\000\002\001\001"
					+ "\000\020\011\246\025\243\026\300\027\251\030\240\031"
					+ "\233\032\265\001\001\000\002\001\001\000\032\006\230"
					+ "\012\214\013\200\014\133\015\174\016\161\017\134\020"
					+ "\215\023\155\024\213\025\143\045\203\001\001\000\020"
					+ "\011\246\025\243\026\300\027\251\030\240\031\233\032"
					+ "\265\001\001\000\002\001\001\000\002\001\001\000\032"
					+ "\006\321\012\214\013\200\014\133\015\174\016\161\017"
					+ "\134\020\215\023\155\024\213\025\143\045\203\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\032\006\320\012\214\013\200\014\133"
					+ "\015\174\016\161\017\134\020\215\023\155\024\213\025"
					+ "\143\045\203\001\001\000\036\006\225\010\226\012\214"
					+ "\013\200\014\133\015\174\016\161\017\134\020\215\023"
					+ "\155\024\213\025\143\045\203\117\316\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\004\065"
					+ "\315\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\032\006\314\012\214\013\200\014\133\015"
					+ "\174\016\161\017\134\020\215\023\155\024\213\025\143"
					+ "\045\203\001\001\000\002\001\001\000\002\001\001\000"
					+ "\032\006\313\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\032\006\312\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\002\001\001\000\032\006\311\012\214\013\200"
					+ "\014\133\015\174\016\161\017\134\020\215\023\155\024"
					+ "\213\025\143\045\203\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\032\006"
					+ "\307\012\214\013\200\014\133\015\174\016\161\017\134"
					+ "\020\215\023\155\024\213\025\143\045\203\001\001\000"
					+ "\032\006\304\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\032\006\303\012\214\013\200\014"
					+ "\133\015\174\016\161\017\134\020\215\023\155\024\213"
					+ "\025\143\045\203\001\001\000\002\001\001\000\002\001"
					+ "\001\000\020\011\246\025\243\026\300\027\251\030\240"
					+ "\031\233\032\265\001\001\000\020\011\246\025\243\026"
					+ "\300\027\251\030\240\031\233\032\265\001\001\000\032"
					+ "\006\306\012\214\013\200\014\133\015\174\016\161\017"
					+ "\134\020\215\023\155\024\213\025\143\045\203\001\001"
					+ "\000\020\011\246\025\243\026\300\027\251\030\240\031"
					+ "\233\032\265\001\001\000\020\011\246\025\243\026\300"
					+ "\027\251\030\240\031\233\032\265\001\001\000\002\001"
					+ "\001\000\020\011\246\025\243\026\300\027\251\030\240"
					+ "\031\233\032\265\001\001\000\020\011\246\025\243\026"
					+ "\300\027\251\030\240\031\233\032\265\001\001\000\020"
					+ "\011\246\025\243\026\300\027\251\030\240\031\233\032"
					+ "\265\001\001\000\020\011\246\025\243\026\300\027\251"
					+ "\030\240\031\233\032\265\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\020\011\246\025\243"
					+ "\026\300\027\251\030\240\031\233\032\265\001\001\000"
					+ "\020\011\246\025\243\026\300\027\251\030\240\031\233"
					+ "\032\265\001\001\000\002\001\001\000\002\001\001\000"
					+ "\020\011\246\025\243\026\300\027\251\030\240\031\233"
					+ "\032\265\001\001\000\002\001\001\000\002\001\001\000"
					+ "\032\006\330\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\020\011\246\025\243\026\300\027\251\030\240"
					+ "\031\233\032\265\001\001\000\002\001\001\000\002\001"
					+ "\001\000\032\006\334\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\045"
					+ "\203\001\001\000\020\011\246\025\243\026\300\027\251"
					+ "\030\240\031\233\032\265\001\001\000\060\006\165\012"
					+ "\214\013\200\014\133\015\174\016\161\017\134\020\215"
					+ "\023\155\024\213\025\143\037\336\040\157\042\175\044"
					+ "\173\045\203\053\146\054\140\056\205\057\154\061\137"
					+ "\066\207\105\153\001\001\000\002\001\001\000\032\006"
					+ "\340\012\214\013\200\014\133\015\174\016\161\017\134"
					+ "\020\215\023\155\024\213\025\143\045\203\001\001\000"
					+ "\020\011\246\025\243\026\300\027\251\030\240\031\233"
					+ "\032\265\001\001\000\060\006\165\012\214\013\200\014"
					+ "\133\015\174\016\161\017\134\020\215\023\155\024\213"
					+ "\025\143\037\342\040\157\042\175\044\173\045\203\053"
					+ "\146\054\140\056\205\057\154\061\137\066\207\105\153"
					+ "\001\001\000\002\001\001\000\032\006\344\012\214\013"
					+ "\200\014\133\015\174\016\161\017\134\020\215\023\155"
					+ "\024\213\025\143\045\203\001\001\000\020\011\246\025"
					+ "\243\026\300\027\251\030\240\031\233\032\265\001\001"
					+ "\000\002\001\001\000\004\062\347\001\001\000\062\006"
					+ "\165\012\214\013\200\014\133\015\174\016\161\017\134"
					+ "\020\215\023\155\024\213\025\143\037\351\040\157\042"
					+ "\175\044\173\045\203\053\146\054\140\056\205\057\154"
					+ "\061\137\063\354\066\207\105\153\001\001\000\032\006"
					+ "\356\012\214\013\200\014\133\015\174\016\161\017\134"
					+ "\020\215\023\155\024\213\025\143\045\203\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\020\011\246\025\243\026"
					+ "\300\027\251\030\240\031\233\032\265\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\004\067\366"
					+ "\001\001\000\004\070\367\001\001\000\002\001\001\000"
					+ "\060\006\165\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\037\376\040"
					+ "\157\042\175\044\173\045\203\053\146\054\140\056\205"
					+ "\057\154\061\137\066\207\105\153\001\001\000\002\001"
					+ "\001\000\012\003\077\004\115\065\104\116\373\001\001"
					+ "\000\002\001\001\000\060\006\165\012\214\013\200\014"
					+ "\133\015\174\016\161\017\134\020\215\023\155\024\213"
					+ "\025\143\037\375\040\157\042\175\044\173\045\203\053"
					+ "\146\054\140\056\205\057\154\061\137\066\207\105\153"
					+ "\001\001\000\002\001\001\000\002\001\001\000\006\106"
					+ "\u0101\107\u0100\001\001\000\002\001\001\000\002\001\001"
					+ "\000\006\033\123\034\u0103\001\001\000\004\113\u0105\001"
					+ "\001\000\034\006\u0108\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\045"
					+ "\203\110\u0109\001\001\000\002\001\001\000\002\001\001"
					+ "\000\040\006\u0108\012\214\013\200\014\133\015\174\016"
					+ "\161\017\134\020\215\023\155\024\213\025\143\045\203"
					+ "\110\u010b\111\u010c\112\u010a\001\001\000\020\011\246\025"
					+ "\243\026\300\027\251\030\240\031\233\032\265\001\001"
					+ "\000\002\001\001\000\004\035\u010f\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\034\006\u0108"
					+ "\012\214\013\200\014\133\015\174\016\161\017\134\020"
					+ "\215\023\155\024\213\025\143\045\203\110\u0110\001\001"
					+ "\000\002\001\001\000\002\001\001\000\006\106\u0101\107"
					+ "\u0112\001\001\000\002\001\001\000\002\001\001\000\004"
					+ "\022\u011d\001\001\000\002\001\001\000\032\006\u011b\012"
					+ "\214\013\200\014\133\015\174\016\161\017\134\020\215"
					+ "\023\155\024\213\025\143\045\203\001\001\000\002\001"
					+ "\001\000\036\006\225\010\226\012\214\013\200\014\133"
					+ "\015\174\016\161\017\134\020\215\023\155\024\213\025"
					+ "\143\045\203\117\u0119\001\001\000\002\001\001\000\002"
					+ "\001\001\000\020\011\246\025\243\026\300\027\251\030"
					+ "\240\031\233\032\265\001\001\000\002\001\001\000\006"
					+ "\033\123\034\u0121\001\001\000\032\006\u011f\012\214\013"
					+ "\200\014\133\015\174\016\161\017\134\020\215\023\155"
					+ "\024\213\025\143\045\203\001\001\000\020\011\246\025"
					+ "\243\026\300\027\251\030\240\031\233\032\265\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\020\011\246\025\243\026\300\027\251\030\240\031\233"
					+ "\032\265\001\001\000\002\001\001\000\002\001\001\000"
					+ "\032\006\u0127\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\020\011\246\025\243\026\300\027\251\030\240"
					+ "\031\233\032\265\001\001\000\060\006\165\012\214\013"
					+ "\200\014\133\015\174\016\161\017\134\020\215\023\155"
					+ "\024\213\025\143\037\u0129\040\157\042\175\044\173\045"
					+ "\203\053\146\054\140\056\205\057\154\061\137\066\207"
					+ "\105\153\001\001\000\004\060\u012b\001\001\000\060\006"
					+ "\165\012\214\013\200\014\133\015\174\016\161\017\134"
					+ "\020\215\023\155\024\213\025\143\037\u012c\040\157\042"
					+ "\175\044\173\045\203\053\146\054\140\056\205\057\154"
					+ "\061\137\066\207\105\153\001\001\000\002\001\001\000"
					+ "\002\001\001\000\020\011\246\025\243\026\300\027\251"
					+ "\030\240\031\233\032\265\001\001\000\020\011\246\025"
					+ "\243\026\300\027\251\030\240\031\233\032\265\001\001"
					+ "\000\002\001\001\000\020\011\246\025\243\026\300\027"
					+ "\251\030\240\031\233\032\265\001\001\000\042\006\u0123"
					+ "\007\u0134\012\214\013\200\014\133\015\174\016\161\017"
					+ "\134\020\215\023\155\024\213\025\143\044\173\045\203"
					+ "\055\u0133\105\u0135\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\020\011\246\025\243\026\300\027\251\030\240\031"
					+ "\233\032\265\001\001\000\020\011\246\025\243\026\300"
					+ "\027\251\030\240\031\233\032\265\001\001\000\002\001"
					+ "\001\000\002\001\001\000\020\011\246\025\243\026\300"
					+ "\027\251\030\240\031\233\032\265\001\001\000\002\001"
					+ "\001\000\002\001\001\000\032\006\u013f\012\214\013\200"
					+ "\014\133\015\174\016\161\017\134\020\215\023\155\024"
					+ "\213\025\143\045\203\001\001\000\020\011\246\025\243"
					+ "\026\300\027\251\030\240\031\233\032\265\001\001\000"
					+ "\002\001\001\000\002\001\001\000\020\011\246\025\243"
					+ "\026\300\027\251\030\240\031\233\032\265\001\001\000"
					+ "\032\006\u0145\012\214\013\200\014\133\015\174\016\161"
					+ "\017\134\020\215\023\155\024\213\025\143\045\203\001"
					+ "\001\000\060\006\165\012\214\013\200\014\133\015\174"
					+ "\016\161\017\134\020\215\023\155\024\213\025\143\037"
					+ "\u014b\040\157\042\175\044\173\045\203\053\146\054\140"
					+ "\056\205\057\154\061\137\066\207\105\153\001\001\000"
					+ "\020\011\246\025\243\026\300\027\251\030\240\031\233"
					+ "\032\265\001\001\000\060\006\165\012\214\013\200\014"
					+ "\133\015\174\016\161\017\134\020\215\023\155\024\213"
					+ "\025\143\037\u014a\040\157\042\175\044\173\045\203\053"
					+ "\146\054\140\056\205\057\154\061\137\066\207\105\153"
					+ "\001\001\000\002\001\001\000\060\006\165\012\214\013"
					+ "\200\014\133\015\174\016\161\017\134\020\215\023\155"
					+ "\024\213\025\143\037\u0149\040\157\042\175\044\173\045"
					+ "\203\053\146\054\140\056\205\057\154\061\137\066\207"
					+ "\105\153\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\060\006\165\012\214\013\200\014\133"
					+ "\015\174\016\161\017\134\020\215\023\155\024\213\025"
					+ "\143\037\u014d\040\157\042\175\044\173\045\203\053\146"
					+ "\054\140\056\205\057\154\061\137\066\207\105\153\001"
					+ "\001\000\002\001\001\000\006\033\123\034\u0103\001\001"
					+ "\000\016\003\077\004\115\065\104\114\u0150\115\117\116"
					+ "\116\001\001\000\002\001\001\000\004\122\u0152\001\001"
					+ "\000\006\036\u0155\040\u0153\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\004\076\u015b\001\001\000"
					+ "\006\065\056\072\u015f\001\001\000\002\001\001\000\004"
					+ "\100\u015d\001\001\000\020\044\071\077\070\101\064\102"
					+ "\065\103\074\104\066\105\073\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public static int errors = 0;

	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("Erro ");

		errors++;

		if (info instanceof java_cup.runtime.Symbol) {
			m.append("( " + info.toString() + ")");

			m.append(" : " + message);
			System.err.println("Erro " + Main.scanner.current_lexeme() + " : Erro sintiatico");
			System.err.println(m);
		}
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Ocorreu um erro de sintaxe.");
	}

	/** Cup generated class to encapsulate user supplied action code. */
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	class CUP$Parser$actions {
		private final Parser parser;

		/** Constructor */
		CUP$Parser$actions(Parser parser) {
			this.parser = parser;
		}

		/** Method 0 with the actual generated action code for actions 0 to 300. */
		public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(int CUP$Parser$act_num,
				java_cup.runtime.lr_parser CUP$Parser$parser, java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
				throws java.lang.Exception {
			/* Symbol object for return from actions */
			java_cup.runtime.Symbol CUP$Parser$result;

			/* select the action based on the action number */
			switch (CUP$Parser$act_num) {
			/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= compilation_unit EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				RESULT = start_val;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				/* ACCEPT */
				CUP$Parser$parser.done_parsing();
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // compilation_unit ::= package_declaration_opt import_statement_loop
					// type_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit", 0,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // compilation_unit ::= package_declaration_opt type_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit", 0,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // package_statement ::= PACKAGE entity_name SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_statement", 37,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // package_declaration_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt", 36,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // package_declaration_opt ::= package_statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt", 36,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // import_statement_loop ::= import_statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop", 38,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // import_statement_loop ::= import_statement import_statement_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop", 38,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // import_statement ::= IMPORT import_aux SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement", 39,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // import_aux ::= entity_name DOT MULT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux", 40,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // import_aux ::= entity_name
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux", 40,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // type_declaration ::= class_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration", 50,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // type_declaration ::= interface_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration", 50,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // NT$0 ::=
			{
				Object RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				Type type = new Type(id);
				SemanticsImpl.getInstance().addType(type);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 78,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // NT$1 ::=
			{
				Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int superclassleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int superclassright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object superclass = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				SemanticsImpl.getInstance().addSuperType((String) id, (String) superclass);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 79,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // class_declaration ::= modifier CLASS IDENTIFIER NT$0 extends_declaration_opt
						// NT$1 implements_declaration_opt LBRACE field_declaration_loop RBRACE
			{
				Object RESULT = null;
				// propagate RESULT from NT$1
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 7)).value;
				int superclassleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
				int superclassright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
				Object superclass = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 5)).value;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration", 58,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // extends_interface_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_opt", 60,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // extends_interface_opt ::= EXTENDS implements_declaration_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_opt", 60,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // interface_declaration ::= modifier INTERFACE IDENTIFIER extends_interface_opt
						// LBRACE field_declaration_loop RBRACE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_declaration", 59,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // extends_declaration_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt", 57,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // extends_declaration_opt ::= EXTENDS entity_name
			{
				Object RESULT = null;
				int nameleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int nameright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object name = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = name;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt", 57,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // modifier_loop ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop", 34,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 22: // modifier_loop ::= modifier_loop modifier
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop", 34,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 23: // modifier ::= PUBLIC
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 24: // modifier ::= PRIVATE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 25: // modifier ::= PROTECTED
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 26: // modifier ::= STATIC
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 27: // modifier ::= FINAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 28: // modifier ::= NATIVE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 29: // modifier ::= SYNCHRONIZED
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 30: // modifier ::= ABSTRACT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 31: // modifier ::= THREADSAFE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 32: // modifier ::= TRANSIENT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier", 33,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 33: // implements_declaration_loop ::= entity_name
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_loop", 56,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 34: // implements_declaration_loop ::= entity_name COMMA implements_declaration_opt
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_loop", 56,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 35: // implements_declaration_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt", 55,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 36: // implements_declaration_opt ::= IMPLEMENTS implements_declaration_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt", 55,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 37: // field_declaration_loop ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop", 62,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 38: // field_declaration_loop ::= field_declaration_loop field_declaration
			{
				Object RESULT = null;
				int fdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int fdright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object fd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = fd;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop", 62,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 39: // field_declaration ::= declarations
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration", 61,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 40: // field_declaration ::= static_initializer
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration", 61,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 41: // field_declaration ::= SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration", 61,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 42: // declarations ::= method_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations", 65,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 43: // declarations ::= constructor_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations", 65,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 44: // declarations ::= variable_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations", 65,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 45: // NT$2 ::=
			{
				Object RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
				Object t = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 3)).value;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

				SemanticsImpl.getInstance().validateFunction(id, (ArrayList<Parameter>) p, (Type) t);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2", 80,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 46: // method_declaration ::= modifier_loop type IDENTIFIER LPAREN
						// parameter_list_opt RPAREN NT$2 termination_opt
			{
				Object RESULT = null;
				// propagate RESULT from NT$2
				RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
				Object t = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 5)).value;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
				Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
				int toleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int toright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object to = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				if (to instanceof Expression) {
					SemanticsImpl.getInstance().exitCurrentScope((Expression) to);
				} else {
					SemanticsImpl.getInstance().exitCurrentScope();
				}

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration", 64,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 47: // constructor_declaration ::= modifier_loop IDENTIFIER LPAREN
						// parameter_list_opt RPAREN statement_block
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration", 63,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 48: // variable_declaration ::= modifier_loop type variable_declarator_loop
						// SEMICOLON
			{
				Object RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Object t = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object v = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

				SemanticsImpl.getInstance().addVariablesFromTempList((Type) t);
				RESULT = v;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration", 67,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 49: // variable_declarator_loop ::= variable_declarator
			{
				Object RESULT = null;
				int varleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int varright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object var = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				SemanticsImpl.getInstance().addVariableToTempList((Variable) var);
				RESULT = var;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop", 69,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 50: // variable_declarator_loop ::= variable_declarator COMMA
						// variable_declarator_loop
			{
				Object RESULT = null;
				int varleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int varright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Object var = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

				SemanticsImpl.getInstance().addVariableToTempList((Variable) var);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop", 69,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 51: // variable_declarator ::= IDENTIFIER brack_loop attr_opt
			{
				Object RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value;
				int expleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int expright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object exp = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				Variable temp = new Variable((String) id, new Type("null"), (Expression) exp);
				RESULT = temp;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator", 68,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 52: // attr_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt", 73,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 53: // attr_opt ::= EQ variable_initializer
			{
				Object RESULT = null;
				int expleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int expright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object exp = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = exp;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt", 73,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 54: // variable_initializer_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt", 71,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 55: // variable_initializer_opt ::= variable_initializer_loop comma_opt
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt", 71,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 56: // variable_initializer_loop ::= variable_initializer
			{
				Object RESULT = null;
				int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object v = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = v;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop", 72,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 57: // variable_initializer_loop ::= variable_initializer_loop COMMA
						// variable_initializer
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop", 72,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 58: // variable_initializer ::= expression
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = e;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer", 70,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 59: // variable_initializer ::= LBRACE variable_initializer_opt RBRACE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer", 70,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 60: // variable_initializer ::= IDENTIFIER
			{
				Object RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				SemanticsImpl.getInstance().validateVariableName(id);
				Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);
				RESULT = var.getValue();

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer", 70,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 61: // expression_exp ::= LPAREN arglist RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp", 7,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 62: // expression_exp ::= LBRACK expression RBRACK
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp", 7,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 63: // expression_exp ::= DOT expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp", 7,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 64: // expression_exp ::= COMMA expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp", 7,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 65: // expression_exp ::= INSTANCEOF entity_name
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp", 7,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 66: // call_method ::= IDENTIFIER LPAREN arglist RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_method", 18,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 67: // numeric_expression ::= MINUS expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression", 8,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 68: // numeric_expression ::= pre_pos_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression", 8,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 69: // numeric_expression ::= expression pre_pos_op
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression", 8,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 70: // numeric_expression ::= expression between_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression", 8,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 71: // bit_expression ::= COMP expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression", 11,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 72: // bit_expression ::= expression bit_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression", 11,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 73: // testing_expression ::= expression test_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_expression", 13,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 74: // logical_expression ::= NOT expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression", 17,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 75: // logical_expression ::= expression logical_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression", 17,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 76: // logical_expression ::= expression QUESTION expression COLON expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression", 17,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 77: // logical_expression ::= BOOLEAN_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression", 17,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 78: // casting_expression ::= LPAREN type RPAREN expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_expression", 12,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 79: // creating_expression ::= NEW creating_expression_termination
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression", 14,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 80: // creating_expression_termination ::= entity_name LPAREN arglist RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination", 15,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 81: // creating_expression_termination ::= type_specifier creating_expression_opt
						// brack_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination", 15,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 82: // creating_expression_termination ::= LPAREN expression RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination", 15,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 83: // creating_expression_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_opt", 16,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 84: // creating_expression_opt ::= LPAREN expression RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_opt", 16,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 85: // bit_op ::= RSHIFTEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op", 23,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 86: // bit_op ::= LSHIFT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op", 23,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 87: // bit_op ::= RSHIFT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op", 23,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 88: // bit_op ::= URSHIFT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op", 23,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 89: // string_op ::= PLUS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_op", 21,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 90: // string_op ::= PLUSEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_op", 21,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 91: // string_expression ::= expression string_op expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression", 10,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 92: // literal_expression ::= INTEGER_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 93: // literal_expression ::= FLOATING_POINT_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 94: // literal_expression ::= BOOLEAN_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 95: // literal_expression ::= STRING_LITERAL
			{
				Object RESULT = null;
				int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				java.lang.String s = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = new Expression(new Type("String"), s.toString());
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 96: // literal_expression ::= CHARACTER_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 97: // literal_expression ::= NULL_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression", 9,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 98: // test_op ::= LT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 99: // test_op ::= GT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 100: // test_op ::= LTEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 101: // test_op ::= GTEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 102: // test_op ::= EQEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 103: // test_op ::= NOTEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op", 22,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 104: // between_op ::= PLUS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 105: // between_op ::= PLUSEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 106: // between_op ::= MINUS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 107: // between_op ::= MINUSEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 108: // between_op ::= MULT
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 109: // between_op ::= MULTEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 110: // between_op ::= DIV
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 111: // between_op ::= DIVEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 112: // between_op ::= MOD
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 113: // between_op ::= MODEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op", 20,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 114: // pre_pos_op ::= PLUSPLUS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_pos_op", 19,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 115: // pre_pos_op ::= MINUSMINUS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_pos_op", 19,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 116: // type_specifier ::= BOOLEAN
			{
				Object RESULT = null;
				RESULT = new Type("boolean");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 117: // type_specifier ::= BYTE
			{
				Object RESULT = null;
				RESULT = new Type("byte");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 118: // type_specifier ::= CHAR
			{
				Object RESULT = null;
				RESULT = new Type("char");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 119: // type_specifier ::= SHORT
			{
				Object RESULT = null;
				RESULT = new Type("short");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 120: // type_specifier ::= INT
			{
				Object RESULT = null;
				RESULT = new Type("int");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 121: // type_specifier ::= FLOAT
			{
				Object RESULT = null;
				RESULT = new Type("float");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 122: // type_specifier ::= LONG
			{
				Object RESULT = null;
				RESULT = new Type("long");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 123: // type_specifier ::= DOUBLE
			{
				Object RESULT = null;
				RESULT = new Type("double");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 124: // type_specifier ::= VOID
			{
				Object RESULT = null;
				RESULT = new Type("void");
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 125: // type_specifier ::= entity_name
			{
				Object RESULT = null;
				int enleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int enright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object en = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				Type type = new Type((String) en);
				RESULT = type;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier", 1,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 126: // logical_op ::= AND
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 127: // logical_op ::= ANDEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 128: // logical_op ::= OR
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 129: // logical_op ::= OROR
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 130: // logical_op ::= OREQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 131: // logical_op ::= XOR
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 132: // logical_op ::= XOREQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 133: // logical_op ::= ANDAND
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 134: // logical_op ::= OROREQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 135: // logical_op ::= MOD
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 136: // logical_op ::= MODEQ
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op", 24,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 137: // entity_name ::= IDENTIFIER
			{
				Object RESULT = null;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = id;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name", 51,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 138: // entity_name ::= entity_name DOT IDENTIFIER
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name", 51,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 139: // static_initializer ::= STATIC statement_block
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_initializer", 66,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 140: // attribution ::= IDENTIFIER EQ expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribution", 35,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 141: // comma_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt", 27,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 142: // comma_opt ::= COMMA
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt", 27,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 143: // type ::= type_specifier brack_loop
			{
				Object RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object t = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = t;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("type", 2,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 144: // identifier_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt", 3,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 145: // identifier_opt ::= IDENTIFIER
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt", 3,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 146: // statement ::= variable_declaration
			{
				Object RESULT = null;
				int vdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int vdright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object vd = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = vd;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 147: // statement ::= expression SEMICOLON
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
				RESULT = e;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 148: // statement ::= statement_block
			{
				Object RESULT = null;
				int stdleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int stdright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object std = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = std;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 149: // statement ::= if_statement
			{
				Object RESULT = null;
				int istleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int istright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object ist = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = ist;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 150: // statement ::= do_statement
			{
				Object RESULT = null;
				int dstmleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int dstmright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object dstm = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = dstm;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 151: // statement ::= while_statement
			{
				Object RESULT = null;
				int wstmleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int wstmright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object wstm = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = wstm;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 152: // statement ::= for_statement
			{
				Object RESULT = null;
				int formleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int formright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object form = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = form;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 153: // statement ::= try_statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 154: // statement ::= switch_statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 155: // statement ::= SYNCHRONIZED LPAREN expression RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 156: // statement ::= RETURN expression_opt SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 157: // statement ::= THROW expression SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 158: // statement ::= IDENTIFIER COLON statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 159: // statement ::= BREAK identifier_opt SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 160: // statement ::= CONTINUE identifier_opt SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 161: // statement ::= SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 162: // try_statement ::= TRY statement catch_op_loop finally_opt
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_statement", 52,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 163: // catch_op_loop ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_op_loop", 53,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 164: // catch_op_loop ::= catch_op_loop CATCH LPAREN parameter RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_op_loop", 53,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 165: // finally_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt", 54,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 166: // finally_opt ::= FINALLY statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt", 54,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 167: // if_statement ::= IF LPAREN expression RPAREN statement else_opt
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement", 45,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 168: // else_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt", 46,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 169: // else_opt ::= ELSE statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt", 46,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 170: // while_statement ::= WHILE LPAREN expression RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement", 44,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 171: // switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE case_loop RBRACE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement", 47,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 172: // case_loop ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_loop", 48,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 173: // case_loop ::= case_loop case_op
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_loop", 48,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 174: // case_op ::= CASE expression COLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op", 49,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 175: // case_op ::= DEFAULT COLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op", 49,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 176: // case_op ::= statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op", 49,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 177: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_statement", 32,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 178: // statement_block ::= LBRACE RBRACE
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block", 30,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 179: // statement_block ::= LBRACE statement_loop RBRACE
			{
				Object RESULT = null;
				int stleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int stright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				Object st = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

				RESULT = st;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block", 30,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 180: // statement_loop ::= statement
			{
				Object RESULT = null;
				int stleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int stright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object st = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = st;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop", 31,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 181: // statement_loop ::= statement_loop statement
			{
				Object RESULT = null;
				int stleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int stright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object st = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = st;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop", 31,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 182: // for_statement ::= header_for expression SEMICOLON expression SEMICOLON RPAREN
						// statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement", 41,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 183: // for_statement ::= header_for expression SEMICOLON RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement", 41,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 184: // for_statement ::= header_for SEMICOLON RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement", 41,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 185: // for_statement ::= header_for expression SEMICOLON expression RPAREN statement
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement", 41,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 186: // header_for ::= FOR LPAREN init_test_upd
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_for", 42,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 187: // init_test_upd ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd", 43,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 188: // init_test_upd ::= variable_declaration
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd", 43,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 189: // init_test_upd ::= expression_opt SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd", 43,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 190: // init_test_upd ::= SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd", 43,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 191: // expression_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt", 5,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 192: // expression_opt ::= expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt", 5,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 193: // termination_opt ::= statement_block
			{
				Object RESULT = null;
				int stleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int stright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object st = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = st;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("termination_opt", 28,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 194: // termination_opt ::= SEMICOLON
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("termination_opt", 28,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 195: // parameter ::= type IDENTIFIER brack_loop
			{
				Object RESULT = null;
				int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Object t = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
				int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
				java.lang.String id = (java.lang.String) ((java_cup.runtime.Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 1)).value;

				RESULT = new Variable(id, (Type) t);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter", 76,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 196: // parameter_list_opt ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt", 74,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 197: // parameter_list_opt ::= parameter_list
			{
				Object RESULT = null;
				int p1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int p1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object p1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				RESULT = p1;
				CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt", 74,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 198: // parameter_list ::= parameter
			{
				Object RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				RESULT = ListCreator.newList(p);

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list", 75,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 199: // parameter_list ::= parameter_list COMMA parameter
			{
				Object RESULT = null;
				int p1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
				int p1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
				Object p1 = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
				int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
				int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
				Object p = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				((ArrayList<Parameter>) p1).add((Parameter) p);
				RESULT = p1;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list", 75,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 200: // arglist ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist", 77,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 201: // arglist ::= expression_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist", 77,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 202: // expression_loop ::= expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop", 6,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 203: // expression_loop ::= expression_loop COMMA expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop", 6,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 204: // expression ::= numeric_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 205: // expression ::= testing_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 206: // expression ::= logical_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 207: // expression ::= string_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 208: // expression ::= bit_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 209: // expression ::= casting_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 210: // expression ::= creating_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 211: // expression ::= literal_expression
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 212: // expression ::= NULL_LITERAL
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 213: // expression ::= SUPER
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 214: // expression ::= THIS
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 215: // expression ::= IDENTIFIER
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 216: // expression ::= attribution
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 217: // expression ::= call_method
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 218: // expression ::= LPAREN expression RPAREN
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 219: // expression ::= expression expression_exp
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 4,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 220: // brack ::= LBRACK RBRACK
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack", 25,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 221: // brack_loop ::=
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop", 26,
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
			case 222: // brack_loop ::= brack brack_loop
			{
				Object RESULT = null;

				CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop", 26,
						((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),
						((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
			}
				return CUP$Parser$result;

			/* . . . . . . */
			default:
				throw new Exception("Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

			}
		} /* end of method */

		/** Method splitting the generated action code into several parts. */
		public final java_cup.runtime.Symbol CUP$Parser$do_action(int CUP$Parser$act_num,
				java_cup.runtime.lr_parser CUP$Parser$parser, java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
				throws java.lang.Exception {
			return CUP$Parser$do_action_part00000000(CUP$Parser$act_num, CUP$Parser$parser, CUP$Parser$stack,
					CUP$Parser$top);
		}
	}

}
