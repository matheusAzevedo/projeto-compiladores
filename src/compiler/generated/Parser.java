
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.generated;

import java.util.ArrayList;

import compiler.analysis.SemanticsImpl;
import compiler.core.Expression;
import compiler.core.Parameter;
import compiler.core.Type;
import compiler.core.Variable;
import main.Main;
import util.ListCreator;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\354\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\050\005\000\002\047\002\000\002\047\003" +
    "\000\002\051\003\000\002\051\004\000\002\052\005\000" +
    "\002\053\005\000\002\053\003\000\002\065\003\000\002" +
    "\065\003\000\002\121\002\000\002\122\002\000\002\075" +
    "\014\000\002\077\002\000\002\077\004\000\002\076\011" +
    "\000\002\074\002\000\002\074\004\000\002\045\002\000" +
    "\002\045\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\073\003\000\002\073\005\000" +
    "\002\072\002\000\002\072\004\000\002\101\002\000\002" +
    "\101\004\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\123\002\000\002\103\012\000\002\102\010\000" +
    "\002\106\006\000\002\110\003\000\002\110\005\000\002" +
    "\107\005\000\002\114\002\000\002\114\004\000\002\112" +
    "\002\000\002\112\004\000\002\113\003\000\002\113\005" +
    "\000\002\111\003\000\002\111\005\000\002\111\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\024\006\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\005" +
    "\000\002\015\004\000\002\015\005\000\002\017\005\000" +
    "\002\023\004\000\002\023\005\000\002\023\007\000\002" +
    "\023\003\000\002\016\006\000\002\020\004\000\002\021" +
    "\006\000\002\021\005\000\002\021\005\000\002\022\002" +
    "\000\002\022\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\027\003\000\002" +
    "\027\003\000\002\014\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\025\003\000\002\025\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\066\003\000\002\066\005\000" +
    "\002\105\004\000\002\046\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\036\002\000\002\036\003\000" +
    "\002\004\004\000\002\005\002\000\002\005\003\000\002" +
    "\040\003\000\002\040\004\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\007\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\003\000\002\067" +
    "\006\000\002\070\002\000\002\070\010\000\002\071\002" +
    "\000\002\071\004\000\002\060\010\000\002\061\002\000" +
    "\002\061\004\000\002\057\007\000\002\062\011\000\002" +
    "\063\002\000\002\063\004\000\002\064\005\000\002\064" +
    "\004\000\002\064\003\000\002\043\011\000\002\041\004" +
    "\000\002\041\005\000\002\042\003\000\002\042\004\000" +
    "\002\124\002\000\002\054\011\000\002\125\002\000\002" +
    "\054\010\000\002\126\002\000\002\054\007\000\002\127" +
    "\002\000\002\054\011\000\002\055\005\000\002\056\002" +
    "\000\002\056\003\000\002\056\004\000\002\056\003\000" +
    "\002\007\002\000\002\007\003\000\002\037\003\000\002" +
    "\037\003\000\002\117\005\000\002\115\002\000\002\115" +
    "\003\000\002\116\003\000\002\116\005\000\002\120\002" +
    "\000\002\120\003\000\002\010\003\000\002\010\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\006\004\000\002" +
    "\034\004\000\002\035\002\000\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\004\040\006\001\ufffd\000\030\004\016\023" +
    "\034\030\035\035\023\041\030\042\025\043\020\046\017" +
    "\051\032\053\024\055\026\001\002\000\002\001\ufffc\000" +
    "\004\142\012\001\002\000\004\002\010\001\002\000\002" +
    "\001\001\000\006\067\013\071\014\001\002\000\002\001" +
    "\uff78\000\002\001\ufffe\000\004\142\015\001\002\000\002" +
    "\001\uff77\000\002\001\uffe3\000\002\001\uffe7\000\002\001" +
    "\uffea\000\004\030\035\001\ufffb\000\006\013\046\032\045" +
    "\001\002\000\002\001\uffe5\000\002\001\uffe2\000\002\001" +
    "\uffe8\000\002\001\uffe1\000\002\001\uffff\000\002\001\uffe9" +
    "\000\002\001\ufff5\000\002\001\uffe4\000\026\004\016\023" +
    "\034\035\023\041\030\042\025\043\020\046\017\051\032" +
    "\053\024\055\026\001\002\000\002\001\uffe6\000\004\142" +
    "\012\001\002\000\002\001\ufff6\000\004\071\042\001\ufff7" +
    "\000\004\067\041\001\002\000\002\001\ufff9\000\006\075" +
    "\043\142\015\001\002\000\002\001\ufff8\000\002\001\000" +
    "\000\004\142\u0169\001\002\000\004\142\047\001\002\000" +
    "\002\001\ufff4\000\004\021\051\001\uffee\000\004\142\012" +
    "\001\002\000\002\001\ufff3\000\004\027\055\001\uffde\000" +
    "\004\063\062\001\002\000\004\142\012\001\002\000\002" +
    "\001\uffdd\000\006\070\060\071\014\001\uffe0\000\004\027" +
    "\055\001\uffde\000\002\001\uffdf\000\002\001\uffdc\000\010" +
    "\046\064\064\073\067\070\001\uffec\000\004\063\133\001" +
    "\002\000\002\001\uffd6\000\002\001\uffd7\000\002\001\uffd9" +
    "\000\002\001\uffd8\000\002\001\uffdb\000\052\004\016\005" +
    "\107\007\103\012\102\016\113\023\034\024\110\033\101" +
    "\034\077\035\023\041\030\042\025\043\020\045\111\046" +
    "\017\051\032\053\024\055\026\057\112\142\106\001\002" +
    "\000\002\001\ufff2\000\002\001\uffd5\000\002\001\uffda\000" +
    "\002\001\uffeb\000\002\001\uff87\000\004\065\125\001\uff17" +
    "\000\002\001\uff89\000\002\001\uff8b\000\002\001\uff8c\000" +
    "\004\142\u015e\001\002\000\004\071\014\001\uff84\000\004" +
    "\061\114\001\uff78\000\002\001\uff8d\000\002\001\uff88\000" +
    "\002\001\uff8a\000\002\001\uff85\000\002\001\uff86\000\026" +
    "\005\107\007\103\012\102\016\113\024\110\033\101\034" +
    "\077\045\111\057\112\142\012\001\uff30\000\004\062\131" +
    "\001\002\000\004\142\123\001\002\000\002\001\uff2e\000" +
    "\004\070\121\001\uff2f\000\026\005\107\007\103\012\102" +
    "\016\113\024\110\033\101\034\077\045\111\057\112\142" +
    "\012\001\002\000\002\001\uff2d\000\004\065\125\001\uff17" +
    "\000\004\065\125\001\uff17\000\004\066\127\001\002\000" +
    "\002\001\uff31\000\002\001\uff18\000\002\001\uff16\000\004" +
    "\063\133\001\002\000\002\001\uffd2\000\076\006\201\014" +
    "\143\017\213\025\145\026\164\036\173\037\163\044\171" +
    "\047\172\050\203\051\212\052\165\054\157\056\177\060" +
    "\207\061\142\063\133\064\211\067\153\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\220\143\217\144\205\001\uffec\000\002\001\uff27\000\002" +
    "\001\uff25\000\002\001\uff8f\000\002\001\uffa2\000\002\001" +
    "\uff5e\000\044\036\173\037\163\047\172\052\165\061\142" +
    "\067\u014b\074\146\077\136\104\170\113\161\125\152\137" +
    "\151\140\137\141\150\142\235\143\217\144\205\001\002" +
    "\000\064\005\107\007\103\012\102\016\113\024\110\033" +
    "\101\034\077\036\173\037\163\045\111\047\172\052\165" +
    "\057\112\061\142\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\u0146\143\217\144\205" +
    "\001\002\000\004\142\375\001\uff68\000\042\036\173\037" +
    "\163\047\172\052\165\061\142\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\235\143" +
    "\217\144\205\001\002\000\004\061\u013c\001\002\000\042" +
    "\036\173\037\163\047\172\052\165\061\142\074\146\077" +
    "\136\104\170\113\161\125\152\137\151\140\137\141\150" +
    "\142\235\143\217\144\205\001\002\000\002\001\uff60\000" +
    "\002\001\uffb4\000\002\001\uffa1\000\042\036\173\037\163" +
    "\047\172\052\165\061\142\074\146\077\136\104\170\113" +
    "\161\125\152\137\151\140\137\141\150\142\235\143\217" +
    "\144\205\001\002\000\002\001\uff57\000\002\001\uff66\000" +
    "\002\001\uff63\000\002\001\uff26\000\042\036\173\037\163" +
    "\047\172\052\165\061\142\074\146\077\136\104\170\113" +
    "\161\125\152\137\151\140\137\141\150\142\235\143\217" +
    "\144\205\001\002\000\002\001\uff64\000\042\036\173\037" +
    "\163\047\172\052\165\061\142\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\235\143" +
    "\217\144\205\001\002\000\002\001\uff23\000\002\001\uffa0" +
    "\000\004\061\u0130\001\002\000\002\001\uff1e\000\116\031" +
    "\253\061\247\065\300\067\u012f\070\262\071\271\073\270" +
    "\074\252\075\242\076\263\077\136\100\265\101\266\102" +
    "\276\103\237\104\170\105\277\106\244\107\302\110\307" +
    "\111\250\114\275\115\240\116\243\117\260\120\304\121" +
    "\255\122\303\123\264\124\256\126\305\127\261\130\310" +
    "\131\274\132\245\133\272\134\267\136\301\001\002\000" +
    "\002\001\uff44\000\002\001\uff8e\000\042\036\173\037\163" +
    "\047\172\052\165\061\142\074\146\077\136\104\170\113" +
    "\161\125\152\137\151\140\137\141\150\142\235\143\217" +
    "\144\205\001\uff35\000\002\001\uff1f\000\030\005\107\007" +
    "\103\012\102\016\113\024\110\033\101\034\077\045\111" +
    "\057\112\061\u0120\142\012\001\002\000\052\004\016\005" +
    "\107\007\103\012\102\016\113\023\034\024\110\033\101" +
    "\034\077\035\023\041\030\042\025\043\020\045\111\046" +
    "\017\051\032\053\024\055\026\057\112\142\012\001\002" +
    "\000\002\001\uff24\000\002\001\uff62\000\074\006\201\014" +
    "\143\017\213\025\145\026\164\036\173\037\163\044\171" +
    "\047\172\050\203\051\212\052\165\054\157\056\177\060" +
    "\207\061\142\063\133\067\153\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\220\143" +
    "\217\144\205\001\uffec\000\002\001\uff21\000\004\142\375" +
    "\001\uff68\000\076\006\201\014\143\017\213\025\145\026" +
    "\164\036\173\037\163\044\171\047\172\050\203\051\212" +
    "\052\165\054\157\056\177\060\207\061\142\063\133\064" +
    "\373\067\153\074\146\077\136\104\170\113\161\125\152" +
    "\137\151\140\137\141\150\142\220\143\217\144\205\001" +
    "\uffec\000\004\061\355\001\002\000\002\001\uff1c\000\002" +
    "\001\uffa4\000\002\001\uff61\000\004\061\351\001\002\000" +
    "\002\001\uff5f\000\002\001\uff46\000\004\061\345\001\002" +
    "\000\074\006\201\014\143\017\213\025\145\026\164\036" +
    "\173\037\163\044\171\047\172\050\203\051\212\052\165" +
    "\054\157\056\177\060\207\061\142\063\133\067\153\074" +
    "\146\077\136\104\170\113\161\125\152\137\151\140\137" +
    "\141\150\142\220\143\217\144\205\001\uffec\000\002\001" +
    "\uff28\000\002\001\uff22\000\002\001\uff1b\000\002\001\uffa5" +
    "\000\006\072\227\112\223\001\uff1d\000\002\001\uff6d\000" +
    "\002\001\uff71\000\074\006\201\014\143\017\213\025\145" +
    "\026\164\036\173\037\163\044\171\047\172\050\203\051" +
    "\212\052\165\054\157\056\177\060\207\061\142\063\133" +
    "\067\153\074\146\077\136\104\170\113\161\125\152\137" +
    "\151\140\137\141\150\142\220\143\217\144\205\001\uffec" +
    "\000\002\001\uff72\000\002\001\uff6f\000\002\001\uff74\000" +
    "\002\001\uff6c\000\002\001\uff73\000\002\001\uff6e\000\042" +
    "\036\173\037\163\047\172\052\165\061\142\074\146\077" +
    "\136\104\170\113\161\125\152\137\151\140\137\141\150" +
    "\142\235\143\217\144\205\001\uff2c\000\042\036\173\037" +
    "\163\047\172\052\165\061\142\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\235\143" +
    "\217\144\205\001\002\000\002\001\uff70\000\004\072\227" +
    "\001\uff1d\000\002\001\uff75\000\002\001\uff92\000\002\001" +
    "\uff9c\000\042\036\173\037\163\047\172\052\165\061\142" +
    "\074\146\077\136\104\170\113\161\125\152\137\151\140" +
    "\137\141\150\142\235\143\217\144\205\001\002\000\002" +
    "\001\uff95\000\002\001\uff9d\000\002\001\uff90\000\002\001" +
    "\uff7e\000\042\036\173\037\163\047\172\052\165\061\142" +
    "\074\146\077\136\104\170\113\161\125\152\137\151\140" +
    "\137\141\150\142\235\143\217\144\205\001\002\000\042" +
    "\036\173\037\163\047\172\052\165\061\142\074\146\077" +
    "\136\104\170\113\161\125\152\137\151\140\137\141\150" +
    "\142\235\143\217\144\205\001\uff2c\000\002\001\uffa9\000" +
    "\002\001\uffbc\000\002\001\uff97\000\004\142\012\001\002" +
    "\000\002\001\uff19\000\002\001\uff80\000\002\001\uff83\000" +
    "\042\036\173\037\163\047\172\052\165\061\142\074\146" +
    "\077\136\104\170\113\161\125\152\137\151\140\137\141" +
    "\150\142\235\143\217\144\205\001\002\000\002\001\uff9f" +
    "\000\002\001\uff81\000\042\036\173\037\163\047\172\052" +
    "\165\061\142\074\146\077\136\104\170\113\161\125\152" +
    "\137\151\140\137\141\150\142\235\143\217\144\205\001" +
    "\002\000\002\001\uff93\000\002\001\uff7c\000\002\001\uffa7" +
    "\000\002\001\uff96\000\002\001\uffac\000\002\001\uffa8\000" +
    "\042\036\173\037\163\047\172\052\165\061\142\074\146" +
    "\077\136\104\170\113\161\125\152\137\151\140\137\141" +
    "\150\142\235\143\217\144\205\001\002\000\002\001\uff7d" +
    "\000\042\036\173\037\163\047\172\052\165\061\142\074" +
    "\146\077\136\104\170\113\161\125\152\137\151\140\137" +
    "\141\150\142\235\143\217\144\205\001\002\000\002\001" +
    "\uff7f\000\002\001\uff9b\000\002\001\uff94\000\002\001\uff91" +
    "\000\042\036\173\037\163\047\172\052\165\061\142\074" +
    "\146\077\136\104\170\113\161\125\152\137\151\140\137" +
    "\141\150\142\235\143\217\144\205\001\002\000\042\036" +
    "\173\037\163\047\172\052\165\061\142\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\235\143\217\144\205\001\002\000\002\001\uffab\000\002" +
    "\001\uff7b\000\002\001\uff9e\000\002\001\uff9a\000\042\036" +
    "\173\037\163\047\172\052\165\061\142\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\235\143\217\144\205\001\002\000\002\001\uffaa\000\002" +
    "\001\uff82\000\114\031\253\061\247\065\300\070\262\071" +
    "\271\073\270\074\252\075\242\076\263\077\136\100\265" +
    "\101\266\102\276\103\237\104\170\105\277\106\244\107" +
    "\302\110\307\111\250\114\275\115\240\116\243\117\260" +
    "\120\304\121\255\122\303\123\264\124\256\126\305\127" +
    "\261\130\310\131\274\132\245\133\272\134\267\136\301" +
    "\001\uffbb\000\116\031\253\061\247\065\300\070\262\071" +
    "\271\073\270\074\252\075\242\076\263\077\136\100\265" +
    "\101\266\102\276\103\237\104\170\105\277\106\244\107" +
    "\302\110\307\111\250\112\313\114\275\115\240\116\243" +
    "\117\260\120\304\121\255\122\303\123\264\124\256\126" +
    "\305\127\261\130\310\131\274\132\245\133\272\134\267" +
    "\136\301\001\002\000\042\036\173\037\163\047\172\052" +
    "\165\061\142\074\146\077\136\104\170\113\161\125\152" +
    "\137\151\140\137\141\150\142\235\143\217\144\205\001" +
    "\002\000\114\031\253\061\247\065\300\070\262\071\271" +
    "\073\270\074\252\075\242\076\263\077\136\100\265\101" +
    "\266\102\276\103\237\104\170\105\277\106\244\107\302" +
    "\110\307\111\250\114\275\115\240\116\243\117\260\120" +
    "\304\121\255\122\303\123\264\124\256\126\305\127\261" +
    "\130\310\131\274\132\245\133\272\134\267\136\301\001" +
    "\uffb5\000\116\031\253\061\247\065\300\066\316\070\262" +
    "\071\271\073\270\074\252\075\242\076\263\077\136\100" +
    "\265\101\266\102\276\103\237\104\170\105\277\106\244" +
    "\107\302\110\307\111\250\114\275\115\240\116\243\117" +
    "\260\120\304\121\255\122\303\123\264\124\256\126\305" +
    "\127\261\130\310\131\274\132\245\133\272\134\267\136" +
    "\301\001\002\000\002\001\uffc3\000\114\031\253\061\247" +
    "\065\300\070\262\071\271\073\270\074\252\075\242\076" +
    "\263\077\136\100\265\101\266\102\276\103\237\104\170" +
    "\105\277\106\244\107\302\110\307\111\250\114\275\115" +
    "\240\116\243\117\260\120\304\121\255\122\303\123\264" +
    "\124\256\126\305\127\261\130\310\131\274\132\245\133" +
    "\272\134\267\136\301\001\uffb6\000\022\123\264\124\256" +
    "\127\261\130\310\131\274\132\245\133\272\136\301\001" +
    "\uffc2\000\104\061\247\065\300\071\271\073\270\074\252" +
    "\075\242\076\263\077\136\100\265\101\266\102\276\103" +
    "\237\104\170\105\277\106\244\107\302\110\307\111\250" +
    "\114\275\115\240\116\243\117\260\120\304\123\264\124" +
    "\256\126\305\127\261\130\310\131\274\132\245\133\272" +
    "\134\267\136\301\001\uffc1\000\114\031\253\061\247\065" +
    "\300\070\262\071\271\073\270\074\252\075\242\076\263" +
    "\077\136\100\265\101\266\102\276\103\237\104\170\105" +
    "\277\106\244\107\302\110\307\111\250\114\275\115\240" +
    "\116\243\117\260\120\304\121\255\122\303\123\264\124" +
    "\256\126\305\127\261\130\310\131\274\132\245\133\272" +
    "\134\267\136\301\001\uffa6\000\004\071\014\001\uffc0\000" +
    "\004\062\331\001\002\000\114\031\253\061\247\065\300" +
    "\070\262\071\271\073\270\074\252\075\242\076\263\077" +
    "\136\100\265\101\266\102\276\103\237\104\170\105\277" +
    "\106\244\107\302\110\307\111\250\114\275\115\240\116" +
    "\243\117\260\120\304\121\255\122\303\123\264\124\256" +
    "\126\305\127\261\130\310\131\274\132\245\133\272\134" +
    "\267\136\301\001\uff2a\000\004\070\327\001\uff2b\000\042" +
    "\036\173\037\163\047\172\052\165\061\142\074\146\077" +
    "\136\104\170\113\161\125\152\137\151\140\137\141\150" +
    "\142\235\143\217\144\205\001\002\000\112\031\253\061" +
    "\247\065\300\071\271\073\270\074\252\075\242\076\263" +
    "\077\136\100\265\101\266\102\276\103\237\104\170\105" +
    "\277\106\244\107\302\110\307\111\250\114\275\115\240" +
    "\116\243\117\260\120\304\121\255\122\303\123\264\124" +
    "\256\126\305\127\261\130\310\131\274\132\245\133\272" +
    "\134\267\136\301\001\uff29\000\002\001\uffc4\000\114\031" +
    "\253\061\247\065\300\070\262\071\271\073\270\074\252" +
    "\075\242\076\263\077\136\100\265\101\266\102\276\103" +
    "\237\104\170\105\277\106\244\107\302\110\307\111\250" +
    "\114\275\115\240\116\243\117\260\120\304\121\255\122" +
    "\303\123\264\124\256\126\305\127\261\130\310\131\274" +
    "\132\245\133\272\134\267\136\301\001\uffb8\000\114\031" +
    "\253\061\247\065\300\070\262\071\271\073\270\074\252" +
    "\075\242\076\263\077\136\100\265\101\266\102\276\103" +
    "\237\104\170\105\277\106\244\107\302\110\307\111\250" +
    "\114\275\115\240\116\243\117\260\120\304\121\255\122" +
    "\303\123\264\124\256\126\305\127\261\130\310\131\274" +
    "\132\245\133\272\134\267\136\301\001\uffb9\000\004\062" +
    "\335\001\002\000\002\001\uffbf\000\002\001\uff5a\000\004" +
    "\060\340\001\002\000\004\061\341\001\002\000\042\036" +
    "\173\037\163\047\172\052\165\061\142\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\235\143\217\144\205\001\002\000\116\031\253\061\247" +
    "\062\343\065\300\070\262\071\271\073\270\074\252\075" +
    "\242\076\263\077\136\100\265\101\266\102\276\103\237" +
    "\104\170\105\277\106\244\107\302\110\307\111\250\114" +
    "\275\115\240\116\243\117\260\120\304\121\255\122\303" +
    "\123\264\124\256\126\305\127\261\130\310\131\274\132" +
    "\245\133\272\134\267\136\301\001\002\000\004\067\344" +
    "\001\002\000\002\001\uff47\000\042\036\173\037\163\047" +
    "\172\052\165\061\142\074\146\077\136\104\170\113\161" +
    "\125\152\137\151\140\137\141\150\142\235\143\217\144" +
    "\205\001\002\000\116\031\253\061\247\062\347\065\300" +
    "\070\262\071\271\073\270\074\252\075\242\076\263\077" +
    "\136\100\265\101\266\102\276\103\237\104\170\105\277" +
    "\106\244\107\302\110\307\111\250\114\275\115\240\116" +
    "\243\117\260\120\304\121\255\122\303\123\264\124\256" +
    "\126\305\127\261\130\310\131\274\132\245\133\272\134" +
    "\267\136\301\001\002\000\074\006\201\014\143\017\213" +
    "\025\145\026\164\036\173\037\163\044\171\047\172\050" +
    "\203\051\212\052\165\054\157\056\177\060\207\061\142" +
    "\063\133\067\153\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\220\143\217\144\205" +
    "\001\uffec\000\002\001\uff5d\000\042\036\173\037\163\047" +
    "\172\052\165\061\142\074\146\077\136\104\170\113\161" +
    "\125\152\137\151\140\137\141\150\142\235\143\217\144" +
    "\205\001\002\000\116\031\253\061\247\062\353\065\300" +
    "\070\262\071\271\073\270\074\252\075\242\076\263\077" +
    "\136\100\265\101\266\102\276\103\237\104\170\105\277" +
    "\106\244\107\302\110\307\111\250\114\275\115\240\116" +
    "\243\117\260\120\304\121\255\122\303\123\264\124\256" +
    "\126\305\127\261\130\310\131\274\132\245\133\272\134" +
    "\267\136\301\001\002\000\074\006\201\014\143\017\213" +
    "\025\145\026\164\036\173\037\163\044\171\047\172\050" +
    "\203\051\212\052\165\054\157\056\177\060\207\061\142" +
    "\063\133\067\153\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\220\143\217\144\205" +
    "\001\uffec\000\002\001\uff4e\000\042\036\173\037\163\047" +
    "\172\052\165\061\142\074\146\077\136\104\170\113\161" +
    "\125\152\137\151\140\137\141\150\142\235\143\217\144" +
    "\205\001\002\000\116\031\253\061\247\062\357\065\300" +
    "\070\262\071\271\073\270\074\252\075\242\076\263\077" +
    "\136\100\265\101\266\102\276\103\237\104\170\105\277" +
    "\106\244\107\302\110\307\111\250\114\275\115\240\116" +
    "\243\117\260\120\304\121\255\122\303\123\264\124\256" +
    "\126\305\127\261\130\310\131\274\132\245\133\272\134" +
    "\267\136\301\001\002\000\004\063\360\001\002\000\002" +
    "\001\uff4c\000\102\006\201\010\362\014\143\015\364\017" +
    "\213\025\145\026\164\036\173\037\163\044\171\047\172" +
    "\050\203\051\212\052\165\054\157\056\177\060\207\061" +
    "\142\063\133\064\365\067\153\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\220\143" +
    "\217\144\205\001\uffec\000\042\036\173\037\163\047\172" +
    "\052\165\061\142\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\235\143\217\144\205" +
    "\001\002\000\002\001\uff48\000\004\112\367\001\002\000" +
    "\002\001\uff4d\000\002\001\uff4b\000\002\001\uff49\000\116" +
    "\031\253\061\247\065\300\070\262\071\271\073\270\074" +
    "\252\075\242\076\263\077\136\100\265\101\266\102\276" +
    "\103\237\104\170\105\277\106\244\107\302\110\307\111" +
    "\250\112\371\114\275\115\240\116\243\117\260\120\304" +
    "\121\255\122\303\123\264\124\256\126\305\127\261\130" +
    "\310\131\274\132\245\133\272\134\267\136\301\001\002" +
    "\000\002\001\uff4a\000\002\001\uff43\000\002\001\uff45\000" +
    "\004\067\376\001\002\000\002\001\uff67\000\002\001\uff59" +
    "\000\002\001\uff55\000\006\011\u0103\022\u0102\001\uff53\000" +
    "\002\001\uff56\000\074\006\201\014\143\017\213\025\145" +
    "\026\164\036\173\037\163\044\171\047\172\050\203\051" +
    "\212\052\165\054\157\056\177\060\207\061\142\063\133" +
    "\067\153\074\146\077\136\104\170\113\161\125\152\137" +
    "\151\140\137\141\150\142\220\143\217\144\205\001\uffec" +
    "\000\004\061\u0104\001\002\000\026\005\107\007\103\012" +
    "\102\016\113\024\110\033\101\034\077\045\111\057\112" +
    "\142\012\001\002\000\004\062\u0106\001\002\000\074\006" +
    "\201\014\143\017\213\025\145\026\164\036\173\037\163" +
    "\044\171\047\172\050\203\051\212\052\165\054\157\056" +
    "\177\060\207\061\142\063\133\067\153\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\220\143\217\144\205\001\uffec\000\002\001\uff54\000\002" +
    "\001\uff52\000\004\142\u010c\001\002\000\004\067\u011d\001" +
    "\002\000\004\070\u011b\001\uffd0\000\004\065\125\001\uff17" +
    "\000\004\072\u010e\001\uffcd\000\044\036\173\037\163\047" +
    "\172\052\165\061\142\063\u0111\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\u0110\143" +
    "\217\144\205\001\002\000\002\001\uffce\000\012\064\uffc5" +
    "\067\uffc5\070\uffc5\072\227\001\uff1d\000\044\036\173\037" +
    "\163\047\172\052\165\061\142\063\u0111\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\u0110\143\217\144\205\001\uffcb\000\114\031\253\061\247" +
    "\065\300\070\262\071\271\073\270\074\252\075\242\076" +
    "\263\077\136\100\265\101\266\102\276\103\237\104\170" +
    "\105\277\106\244\107\302\110\307\111\250\114\275\115" +
    "\240\116\243\117\260\120\304\121\255\122\303\123\264" +
    "\124\256\126\305\127\261\130\310\131\274\132\245\133" +
    "\272\134\267\136\301\001\uffc7\000\002\001\uffcc\000\004" +
    "\070\u0118\001\uff6b\000\002\001\uffc9\000\004\064\u0117\001" +
    "\002\000\002\001\uffc6\000\044\036\173\037\163\047\172" +
    "\052\165\061\142\063\u0111\074\146\077\136\104\170\113" +
    "\161\125\152\137\151\140\137\141\150\142\u0110\143\217" +
    "\144\205\001\uff6a\000\002\001\uffca\000\002\001\uffc8\000" +
    "\004\142\u010c\001\002\000\002\001\uffcf\000\002\001\uffd1" +
    "\000\004\061\u0128\001\uffae\000\002\001\uffb2\000\042\036" +
    "\173\037\163\047\172\052\165\061\142\074\146\077\136" +
    "\104\170\113\161\125\152\137\151\140\137\141\150\142" +
    "\235\143\217\144\205\001\002\000\006\061\u0122\071\014" +
    "\001\uff84\000\042\036\173\037\163\047\172\052\165\061" +
    "\142\074\146\077\136\104\170\113\161\125\152\137\151" +
    "\140\137\141\150\142\235\143\217\144\205\001\uff2c\000" +
    "\004\062\u0124\001\002\000\002\001\uffb1\000\116\031\253" +
    "\061\247\062\u0126\065\300\070\262\071\271\073\270\074" +
    "\252\075\242\076\263\077\136\100\265\101\266\102\276" +
    "\103\237\104\170\105\277\106\244\107\302\110\307\111" +
    "\250\114\275\115\240\116\243\117\260\120\304\121\255" +
    "\122\303\123\264\124\256\126\305\127\261\130\310\131" +
    "\274\132\245\133\272\134\267\136\301\001\002\000\002" +
    "\001\uffaf\000\004\065\125\001\uff17\000\042\036\173\037" +
    "\163\047\172\052\165\061\142\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\235\143" +
    "\217\144\205\001\002\000\116\031\253\061\247\062\u012a" +
    "\065\300\070\262\071\271\073\270\074\252\075\242\076" +
    "\263\077\136\100\265\101\266\102\276\103\237\104\170" +
    "\105\277\106\244\107\302\110\307\111\250\114\275\115" +
    "\240\116\243\117\260\120\304\121\255\122\303\123\264" +
    "\124\256\126\305\127\261\130\310\131\274\132\245\133" +
    "\272\134\267\136\301\001\002\000\002\001\uffad\000\002" +
    "\001\uffb0\000\004\067\u012e\001\002\000\114\031\253\061" +
    "\247\065\300\070\262\071\271\073\270\074\252\075\242" +
    "\076\263\077\136\100\265\101\266\102\276\103\237\104" +
    "\170\105\277\106\244\107\302\110\307\111\250\114\275" +
    "\115\240\116\243\117\260\120\304\121\255\122\303\123" +
    "\264\124\256\126\305\127\261\130\310\131\274\132\245" +
    "\133\272\134\267\136\301\001\uff34\000\002\001\uff5c\000" +
    "\002\001\uff65\000\042\036\173\037\163\047\172\052\165" +
    "\061\142\074\146\077\136\104\170\113\161\125\152\137" +
    "\151\140\137\141\150\142\235\143\217\144\205\001\002" +
    "\000\116\031\253\061\247\062\u0132\065\300\070\262\071" +
    "\271\073\270\074\252\075\242\076\263\077\136\100\265" +
    "\101\266\102\276\103\237\104\170\105\277\106\244\107" +
    "\302\110\307\111\250\114\275\115\240\116\243\117\260" +
    "\120\304\121\255\122\303\123\264\124\256\126\305\127" +
    "\261\130\310\131\274\132\245\133\272\134\267\136\301" +
    "\001\002\000\074\006\201\014\143\017\213\025\145\026" +
    "\164\036\173\037\163\044\171\047\172\050\203\051\212" +
    "\052\165\054\157\056\177\060\207\061\142\063\133\067" +
    "\153\074\146\077\136\104\170\113\161\125\152\137\151" +
    "\140\137\141\150\142\220\143\217\144\205\001\uffec\000" +
    "\004\020\u0134\001\uff50\000\074\006\201\014\143\017\213" +
    "\025\145\026\164\036\173\037\163\044\171\047\172\050" +
    "\203\051\212\052\165\054\157\056\177\060\207\061\142" +
    "\063\133\067\153\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\220\143\217\144\205" +
    "\001\uffec\000\002\001\uff51\000\002\001\uff4f\000\114\031" +
    "\253\061\247\065\300\070\262\071\271\073\270\074\252" +
    "\075\242\076\263\077\136\100\265\101\266\102\276\103" +
    "\237\104\170\105\277\106\244\107\302\110\307\111\250" +
    "\114\275\115\240\116\243\117\260\120\304\121\255\122" +
    "\303\123\264\124\256\126\305\127\261\130\310\131\274" +
    "\132\245\133\272\134\267\136\301\001\uffba\000\116\031" +
    "\253\061\247\065\300\067\u0139\070\262\071\271\073\270" +
    "\074\252\075\242\076\263\077\136\100\265\101\266\102" +
    "\276\103\237\104\170\105\277\106\244\107\302\110\307" +
    "\111\250\114\275\115\240\116\243\117\260\120\304\121" +
    "\255\122\303\123\264\124\256\126\305\127\261\130\310" +
    "\131\274\132\245\133\272\134\267\136\301\001\002\000" +
    "\002\001\uff5b\000\114\031\253\061\247\065\300\070\262" +
    "\071\271\073\270\074\252\075\242\076\263\077\136\100" +
    "\265\101\266\102\276\103\237\104\170\105\277\106\244" +
    "\107\302\110\307\111\250\114\275\115\240\116\243\117" +
    "\260\120\304\121\255\122\303\123\264\124\256\126\305" +
    "\127\261\130\310\131\274\132\245\133\272\134\267\136" +
    "\301\001\uffb7\000\060\071\271\075\242\076\263\077\136" +
    "\104\170\107\302\110\307\111\250\114\275\115\240\116" +
    "\243\117\260\120\304\123\264\124\256\126\305\127\261" +
    "\130\310\131\274\132\245\133\272\134\267\136\301\001" +
    "\uffbe\000\044\036\173\037\163\047\172\052\165\061\142" +
    "\067\u013d\074\146\077\136\104\170\113\161\125\152\137" +
    "\151\140\137\141\150\142\235\143\217\144\205\001\uffec" +
    "\000\002\001\uff36\000\002\001\uff3a\000\004\067\u0141\001" +
    "\002\000\002\001\uff38\000\002\001\uff37\000\114\031\253" +
    "\061\247\065\300\070\262\071\271\073\270\074\252\075" +
    "\242\076\263\077\136\100\265\101\266\102\276\103\237" +
    "\104\170\105\277\106\244\107\302\110\307\111\250\114" +
    "\275\115\240\116\243\117\260\120\304\121\255\122\303" +
    "\123\264\124\256\126\305\127\261\130\310\131\274\132" +
    "\245\133\272\134\267\136\301\001\uffbd\000\004\067\u0144" +
    "\001\002\000\002\001\uff58\000\116\031\253\061\247\062" +
    "\u014a\065\300\070\262\071\271\073\270\074\252\075\242" +
    "\076\263\077\136\100\265\101\266\102\276\103\237\104" +
    "\170\105\277\106\244\107\302\110\307\111\250\114\275" +
    "\115\240\116\243\117\260\120\304\121\255\122\303\123" +
    "\264\124\256\126\305\127\261\130\310\131\274\132\245" +
    "\133\272\134\267\136\301\001\002\000\012\062\uff78\065" +
    "\uff78\071\uff78\072\227\001\uff1d\000\004\062\u0148\001\002" +
    "\000\042\036\173\037\163\047\172\052\165\061\142\074" +
    "\146\077\136\104\170\113\161\125\152\137\151\140\137" +
    "\141\150\142\235\143\217\144\205\001\002\000\104\061" +
    "\247\065\300\071\271\073\270\074\252\075\242\076\263" +
    "\077\136\100\265\101\266\102\276\103\237\104\170\105" +
    "\277\106\244\107\302\110\307\111\250\114\275\115\240" +
    "\116\243\117\260\120\304\123\264\124\256\126\305\127" +
    "\261\130\310\131\274\132\245\133\272\134\267\136\301" +
    "\001\uffb3\000\002\001\uff1a\000\044\036\173\037\163\047" +
    "\172\052\165\061\142\062\u0156\074\146\077\136\104\170" +
    "\113\161\125\152\137\151\140\137\141\150\142\235\143" +
    "\217\144\205\001\uff35\000\004\067\u014d\001\002\000\042" +
    "\036\173\037\163\047\172\052\165\061\142\074\146\077" +
    "\136\104\170\113\161\125\152\137\151\140\137\141\150" +
    "\142\235\143\217\144\205\001\uff35\000\004\067\u014f\001" +
    "\002\000\004\062\u0150\001\002\000\074\006\201\014\143" +
    "\017\213\025\145\026\164\036\173\037\163\044\171\047" +
    "\172\050\203\051\212\052\165\054\157\056\177\060\207" +
    "\061\142\063\133\067\153\074\146\077\136\104\170\113" +
    "\161\125\152\137\151\140\137\141\150\142\220\143\217" +
    "\144\205\001\uffec\000\002\001\uff3f\000\004\062\u0153\001" +
    "\002\000\002\001\uff3c\000\074\006\201\014\143\017\213" +
    "\025\145\026\164\036\173\037\163\044\171\047\172\050" +
    "\203\051\212\052\165\054\157\056\177\060\207\061\142" +
    "\063\133\067\153\074\146\077\136\104\170\113\161\125" +
    "\152\137\151\140\137\141\150\142\220\143\217\144\205" +
    "\001\uffec\000\002\001\uff3b\000\002\001\uff3e\000\002\001" +
    "\uff42\000\004\067\u0159\001\002\000\004\062\u015a\001\002" +
    "\000\074\006\201\014\143\017\213\025\145\026\164\036" +
    "\173\037\163\044\171\047\172\050\203\051\212\052\165" +
    "\054\157\056\177\060\207\061\142\063\133\067\153\074" +
    "\146\077\136\104\170\113\161\125\152\137\151\140\137" +
    "\141\150\142\220\143\217\144\205\001\uffec\000\002\001" +
    "\uff41\000\074\006\201\014\143\017\213\025\145\026\164" +
    "\036\173\037\163\044\171\047\172\050\203\051\212\052" +
    "\165\054\157\056\177\060\207\061\142\063\133\067\153" +
    "\074\146\077\136\104\170\113\161\125\152\137\151\140" +
    "\137\141\150\142\220\143\217\144\205\001\uffec\000\002" +
    "\001\uff3d\000\006\061\u015f\065\125\001\uff17\000\026\005" +
    "\107\007\103\012\102\016\113\024\110\033\101\034\077" +
    "\045\111\057\112\142\012\001\uff30\000\004\062\u0161\001" +
    "\002\000\002\001\uffd4\000\006\063\133\067\u0164\001\002" +
    "\000\002\001\uff33\000\002\001\uff32\000\002\001\uffd3\000" +
    "\002\001\uff69\000\002\001\uff76\000\004\071\014\001\uffed" +
    "\000\004\021\u016a\001\ufff1\000\004\142\012\001\002\000" +
    "\004\063\u016c\001\002\000\002\001\uffdc\000\010\046\064" +
    "\064\u016e\067\070\001\uffec\000\002\001\uffef\000\002\001" +
    "\ufff0\000\002\001\ufffa" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\010\002\006\047\003\050\004\001\001\000" +
    "\016\044\021\051\032\052\020\065\026\075\035\076\030" +
    "\001\001\000\002\001\001\000\004\066\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u016f\052\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\044\021\065\043\075\035" +
    "\076\030\001\001\000\002\001\001\000\006\053\037\066" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\047\001\001\000\004\074\051\001\001\000" +
    "\004\066\u0167\001\001\000\004\122\052\001\001\000\004" +
    "\072\053\001\001\000\002\001\001\000\006\066\056\073" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\060\001\001\000\002\001\001\000\004\101\062\001" +
    "\001\000\020\045\071\100\070\102\064\103\065\104\074" +
    "\105\066\106\073\001\001\000\004\041\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\077\004\103\044" +
    "\075\066\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\123\035\u0165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\107\u010a\110\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\077\004\115\066\104\115\114" +
    "\116\117\117\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\077" +
    "\004\115\066\104\117\121\001\001\000\002\001\001\000" +
    "\006\034\123\035\125\001\001\000\006\034\123\035\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\131\001\001\000\002" +
    "\001\001\000\062\006\165\012\213\013\177\014\134\015" +
    "\174\016\161\017\133\020\214\023\155\024\215\025\143" +
    "\040\166\041\157\042\201\043\175\045\173\046\203\054" +
    "\146\055\140\057\205\060\154\062\137\067\207\106\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\u012c" +
    "\007\u014b\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\046\203\001\001" +
    "\000\040\003\077\004\u0146\006\u0144\012\213\013\177\014" +
    "\134\015\174\016\161\017\133\020\214\023\155\024\215" +
    "\025\143\046\203\066\104\001\001\000\004\005\u0142\001" +
    "\001\000\032\006\u0141\012\213\013\177\014\134\015\174" +
    "\016\161\017\133\020\214\023\155\024\215\025\143\046" +
    "\203\001\001\000\002\001\001\000\032\006\u013a\012\213" +
    "\013\177\014\134\015\174\016\161\017\133\020\214\023" +
    "\155\024\215\025\143\046\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\u0139\012" +
    "\213\013\177\014\134\015\174\016\161\017\133\020\214" +
    "\023\155\024\215\025\143\046\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\u0137\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\032\006\u0136\012\213\013" +
    "\177\014\134\015\174\016\161\017\133\020\214\023\155" +
    "\024\215\025\143\046\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\253\025\250\026\305\027\256\030\245\031\240\032" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\u012c\007\u012b\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\010\003\u011d\021\u011e\066" +
    "\u0120\001\001\000\012\003\077\004\u0108\044\075\066\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\006" +
    "\165\012\213\013\177\014\134\015\174\016\161\017\133" +
    "\020\214\023\155\024\215\025\143\040\376\041\157\043" +
    "\175\045\173\046\203\054\146\055\140\057\205\060\154" +
    "\062\137\067\207\106\153\001\001\000\002\001\001\000" +
    "\004\005\373\001\001\000\060\006\165\012\213\013\177" +
    "\014\134\015\174\016\161\017\133\020\214\023\155\024" +
    "\215\025\143\040\371\041\157\043\175\045\173\046\203" +
    "\054\146\055\140\057\205\060\154\062\137\067\207\106" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\006\165" +
    "\012\213\013\177\014\134\015\174\016\161\017\133\020" +
    "\214\023\155\024\215\025\143\040\336\041\157\043\175" +
    "\045\173\046\203\054\146\055\140\057\205\060\154\062" +
    "\137\067\207\106\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\165\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\040\335\041\157" +
    "\043\175\045\173\046\203\054\146\055\140\057\205\060" +
    "\154\062\137\067\207\106\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\006\324\010\325" +
    "\012\213\013\177\014\134\015\174\016\161\017\133\020" +
    "\214\023\155\024\215\025\143\046\203\120\333\001\001" +
    "\000\032\006\235\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\004\033\232\001\001\000" +
    "\020\011\253\025\250\026\305\027\256\030\245\031\240" +
    "\032\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\332\012\213\013\177\014\134\015\174\016\161" +
    "\017\133\020\214\023\155\024\215\025\143\046\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\331\012\213\013\177\014" +
    "\134\015\174\016\161\017\133\020\214\023\155\024\215" +
    "\025\143\046\203\001\001\000\036\006\324\010\325\012" +
    "\213\013\177\014\134\015\174\016\161\017\133\020\214" +
    "\023\155\024\215\025\143\046\203\120\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\321\012\213\013\177\014\134" +
    "\015\174\016\161\017\133\020\214\023\155\024\215\025" +
    "\143\046\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\320\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\317\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\032\006\316\012\213\013" +
    "\177\014\134\015\174\016\161\017\133\020\214\023\155" +
    "\024\215\025\143\046\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\314\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\046\203\001\001" +
    "\000\032\006\311\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\310\012\213\013\177" +
    "\014\134\015\174\016\161\017\133\020\214\023\155\024" +
    "\215\025\143\046\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\253\025\250\026\305\027\256\030" +
    "\245\031\240\032\272\001\001\000\020\011\253\025\250" +
    "\026\305\027\256\030\245\031\240\032\272\001\001\000" +
    "\032\006\313\012\213\013\177\014\134\015\174\016\161" +
    "\017\133\020\214\023\155\024\215\025\143\046\203\001" +
    "\001\000\020\011\253\025\250\026\305\027\256\030\245" +
    "\031\240\032\272\001\001\000\020\011\253\025\250\026" +
    "\305\027\256\030\245\031\240\032\272\001\001\000\002" +
    "\001\001\000\020\011\253\025\250\026\305\027\256\030" +
    "\245\031\240\032\272\001\001\000\020\011\253\025\250" +
    "\026\305\027\256\030\245\031\240\032\272\001\001\000" +
    "\020\011\253\025\250\026\305\027\256\030\245\031\240" +
    "\032\272\001\001\000\020\011\253\025\250\026\305\027" +
    "\256\030\245\031\240\032\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\253\025\250\026\305\027" +
    "\256\030\245\031\240\032\272\001\001\000\002\001\001" +
    "\000\032\006\327\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\020\011\253\025\250\026\305\027\256\030" +
    "\245\031\240\032\272\001\001\000\002\001\001\000\020" +
    "\011\253\025\250\026\305\027\256\030\245\031\240\032" +
    "\272\001\001\000\020\011\253\025\250\026\305\027\256" +
    "\030\245\031\240\032\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\341\012\213\013\177\014\134\015" +
    "\174\016\161\017\133\020\214\023\155\024\215\025\143" +
    "\046\203\001\001\000\020\011\253\025\250\026\305\027" +
    "\256\030\245\031\240\032\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\345\012\213\013\177\014" +
    "\134\015\174\016\161\017\133\020\214\023\155\024\215" +
    "\025\143\046\203\001\001\000\020\011\253\025\250\026" +
    "\305\027\256\030\245\031\240\032\272\001\001\000\060" +
    "\006\165\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\040\347\041\157" +
    "\043\175\045\173\046\203\054\146\055\140\057\205\060" +
    "\154\062\137\067\207\106\153\001\001\000\002\001\001" +
    "\000\032\006\351\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\020\011\253\025\250\026\305\027\256\030" +
    "\245\031\240\032\272\001\001\000\060\006\165\012\213" +
    "\013\177\014\134\015\174\016\161\017\133\020\214\023" +
    "\155\024\215\025\143\040\353\041\157\043\175\045\173" +
    "\046\203\054\146\055\140\057\205\060\154\062\137\067" +
    "\207\106\153\001\001\000\002\001\001\000\032\006\355" +
    "\012\213\013\177\014\134\015\174\016\161\017\133\020" +
    "\214\023\155\024\215\025\143\046\203\001\001\000\020" +
    "\011\253\025\250\026\305\027\256\030\245\031\240\032" +
    "\272\001\001\000\002\001\001\000\004\063\360\001\001" +
    "\000\062\006\165\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\040\362" +
    "\041\157\043\175\045\173\046\203\054\146\055\140\057" +
    "\205\060\154\062\137\064\365\067\207\106\153\001\001" +
    "\000\032\006\367\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\253" +
    "\025\250\026\305\027\256\030\245\031\240\032\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\377\001\001\000\004\071\u0100\001\001\000\002" +
    "\001\001\000\060\006\165\012\213\013\177\014\134\015" +
    "\174\016\161\017\133\020\214\023\155\024\215\025\143" +
    "\040\u0107\041\157\043\175\045\173\046\203\054\146\055" +
    "\140\057\205\060\154\062\137\067\207\106\153\001\001" +
    "\000\002\001\001\000\012\003\077\004\115\066\104\117" +
    "\u0104\001\001\000\002\001\001\000\060\006\165\012\213" +
    "\013\177\014\134\015\174\016\161\017\133\020\214\023" +
    "\155\024\215\025\143\040\u0106\041\157\043\175\045\173" +
    "\046\203\054\146\055\140\057\205\060\154\062\137\067" +
    "\207\106\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u010a\110\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\123\035\u010c\001\001\000\004" +
    "\114\u010e\001\001\000\034\006\u0111\012\213\013\177\014" +
    "\134\015\174\016\161\017\133\020\214\023\155\024\215" +
    "\025\143\046\203\111\u0112\001\001\000\002\001\001\000" +
    "\004\033\232\001\001\000\040\006\u0111\012\213\013\177" +
    "\014\134\015\174\016\161\017\133\020\214\023\155\024" +
    "\215\025\143\046\203\111\u0114\112\u0115\113\u0113\001\001" +
    "\000\020\011\253\025\250\026\305\027\256\030\245\031" +
    "\240\032\272\001\001\000\002\001\001\000\004\036\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\u0111\012\213\013\177\014\134\015\174" +
    "\016\161\017\133\020\214\023\155\024\215\025\143\046" +
    "\203\111\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u010a\110\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0126\001\001\000\002\001\001" +
    "\000\032\006\u0124\012\213\013\177\014\134\015\174\016" +
    "\161\017\133\020\214\023\155\024\215\025\143\046\203" +
    "\001\001\000\002\001\001\000\036\006\324\010\325\012" +
    "\213\013\177\014\134\015\174\016\161\017\133\020\214" +
    "\023\155\024\215\025\143\046\203\120\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\253\025\250" +
    "\026\305\027\256\030\245\031\240\032\272\001\001\000" +
    "\002\001\001\000\006\034\123\035\u012a\001\001\000\032" +
    "\006\u0128\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\046\203\001\001" +
    "\000\020\011\253\025\250\026\305\027\256\030\245\031" +
    "\240\032\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\253\025\250\026\305\027" +
    "\256\030\245\031\240\032\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\u0130\012\213\013\177\014" +
    "\134\015\174\016\161\017\133\020\214\023\155\024\215" +
    "\025\143\046\203\001\001\000\020\011\253\025\250\026" +
    "\305\027\256\030\245\031\240\032\272\001\001\000\060" +
    "\006\165\012\213\013\177\014\134\015\174\016\161\017" +
    "\133\020\214\023\155\024\215\025\143\040\u0132\041\157" +
    "\043\175\045\173\046\203\054\146\055\140\057\205\060" +
    "\154\062\137\067\207\106\153\001\001\000\004\061\u0134" +
    "\001\001\000\060\006\165\012\213\013\177\014\134\015" +
    "\174\016\161\017\133\020\214\023\155\024\215\025\143" +
    "\040\u0135\041\157\043\175\045\173\046\203\054\146\055" +
    "\140\057\205\060\154\062\137\067\207\106\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\253\025" +
    "\250\026\305\027\256\030\245\031\240\032\272\001\001" +
    "\000\020\011\253\025\250\026\305\027\256\030\245\031" +
    "\240\032\272\001\001\000\002\001\001\000\020\011\253" +
    "\025\250\026\305\027\256\030\245\031\240\032\272\001" +
    "\001\000\020\011\253\025\250\026\305\027\256\030\245" +
    "\031\240\032\272\001\001\000\042\006\u012c\007\u013e\012" +
    "\213\013\177\014\134\015\174\016\161\017\133\020\214" +
    "\023\155\024\215\025\143\045\173\046\203\056\u013d\106" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\253\025\250\026\305\027\256\030\245\031\240\032\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\253\025\250\026\305\027\256\030\245\031\240\032\272" +
    "\001\001\000\004\033\232\001\001\000\002\001\001\000" +
    "\032\006\u0148\012\213\013\177\014\134\015\174\016\161" +
    "\017\133\020\214\023\155\024\215\025\143\046\203\001" +
    "\001\000\020\011\253\025\250\026\305\027\256\030\245" +
    "\031\240\032\272\001\001\000\002\001\001\000\034\006" +
    "\u012c\007\u0156\012\213\013\177\014\134\015\174\016\161" +
    "\017\133\020\214\023\155\024\215\025\143\046\203\001" +
    "\001\000\004\125\u014d\001\001\000\034\006\u012c\007\u0151" +
    "\012\213\013\177\014\134\015\174\016\161\017\133\020" +
    "\214\023\155\024\215\025\143\046\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\006\165\012\213\013" +
    "\177\014\134\015\174\016\161\017\133\020\214\023\155" +
    "\024\215\025\143\040\u0150\041\157\043\175\045\173\046" +
    "\203\054\146\055\140\057\205\060\154\062\137\067\207" +
    "\106\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u0153\001\001\000\060\006\165\012\213\013\177" +
    "\014\134\015\174\016\161\017\133\020\214\023\155\024" +
    "\215\025\143\040\u0154\041\157\043\175\045\173\046\203" +
    "\054\146\055\140\057\205\060\154\062\137\067\207\106" +
    "\153\001\001\000\002\001\001\000\004\126\u015b\001\001" +
    "\000\004\124\u0157\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\165\012\213\013\177\014\134\015\174" +
    "\016\161\017\133\020\214\023\155\024\215\025\143\040" +
    "\u015a\041\157\043\175\045\173\046\203\054\146\055\140" +
    "\057\205\060\154\062\137\067\207\106\153\001\001\000" +
    "\002\001\001\000\060\006\165\012\213\013\177\014\134" +
    "\015\174\016\161\017\133\020\214\023\155\024\215\025" +
    "\143\040\u015c\041\157\043\175\045\173\046\203\054\146" +
    "\055\140\057\205\060\154\062\137\067\207\106\153\001" +
    "\001\000\002\001\001\000\006\034\123\035\u010c\001\001" +
    "\000\016\003\077\004\115\066\104\115\u015f\116\117\117" +
    "\116\001\001\000\002\001\001\000\004\123\u0161\001\001" +
    "\000\006\037\u0164\041\u0162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u016a\001\001\000" +
    "\006\066\056\073\u016e\001\001\000\002\001\001\000\004" +
    "\101\u016c\001\001\000\020\045\071\100\070\102\064\103" +
    "\065\104\074\105\066\106\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static int errors = 0;
	
	public void report_error(String message, Object info){
   		StringBuffer m = new StringBuffer("Erro ");
		
		errors++;
   		
		if (info instanceof java_cup.runtime.Symbol){
     		m.append( "( "+ info.toString() + ")" );

   			m.append(" : " + message);
			System.err.println("Erro "+ Main.scanner.current_lexeme() + " : Erro sintiatico");
   			System.err.println(m);
 		}
	}

 	public void report_fatal_error(String message, Object info) {
   		report_error(message, info);
   		throw new RuntimeException("Ocorreu um erro de sintaxe.");
 	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= package_declaration_opt import_statement_loop type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= package_declaration_opt type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_statement ::= PACKAGE entity_name SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_statement",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_declaration_opt ::= package_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_statement_loop ::= import_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_statement_loop ::= import_statement import_statement_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement_loop",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_statement ::= IMPORT import_aux SEMICOLON 
            {
              Object RESULT =null;
		int iauxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iauxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object iaux = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					SemanticsImpl.getInstance().addType(new Type(((String) iaux))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_statement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_aux ::= entity_name DOT MULT 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = en; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_aux ::= entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = en; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_aux",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration ::= class_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= interface_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
  
						Type type = new Type(id);
						SemanticsImpl.getInstance().addType(type);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

						SemanticsImpl.getInstance().addSuperType((String) id, (String) superclass);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_declaration ::= modifier CLASS IDENTIFIER NT$0 extends_declaration_opt NT$1 implements_declaration_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object superclass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
						SemanticsImpl.getInstance().getCodeGenerator().generateFinalAssemblyCode();
						System.out.println("AQUI");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_declaration",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // extends_interface_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_opt",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // extends_interface_opt ::= EXTENDS implements_declaration_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_interface_opt",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // interface_declaration ::= modifier INTERFACE IDENTIFIER extends_interface_opt LBRACE field_declaration_loop RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_declaration",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // extends_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // extends_declaration_opt ::= EXTENDS entity_name 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = name;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_declaration_opt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifier_loop ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modifier_loop ::= modifier_loop modifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier_loop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modifier ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modifier ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modifier ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // modifier ::= STATIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modifier ::= NATIVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // modifier ::= ABSTRACT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modifier ::= THREADSAFE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modifier ::= TRANSIENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // implements_declaration_loop ::= entity_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_loop",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // implements_declaration_loop ::= entity_name COMMA implements_declaration_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_loop",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // implements_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // implements_declaration_opt ::= IMPLEMENTS implements_declaration_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("implements_declaration_opt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_declaration_loop ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_declaration_loop ::= field_declaration_loop field_declaration 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT = fd;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration_loop",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_declaration ::= declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_declaration",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declarations ::= method_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarations ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarations ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

		SemanticsImpl.getInstance().validateFunction(id, (ArrayList<Parameter>) p, (Type) t); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_declaration ::= modifier_loop type IDENTIFIER LPAREN parameter_list_opt RPAREN NT$2 termination_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(to instanceof Expression){
			SemanticsImpl.getInstance().exitCurrentScope((Expression) to);
		} else {
			SemanticsImpl.getInstance().exitCurrentScope();
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constructor_declaration ::= modifier_loop IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor_declaration",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_declaration ::= modifier_loop type variable_declarator_loop SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	SemanticsImpl.getInstance().addVariablesFromTempList((Type) t);
	RESULT = v;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_declarator_loop ::= variable_declarator 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 		SemanticsImpl.getInstance().addVariableToTempList((Variable) var); 
		RESULT = var;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_declarator_loop ::= variable_declarator COMMA variable_declarator_loop 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		 SemanticsImpl.getInstance().addVariableToTempList((Variable) var);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator_loop",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_declarator ::= IDENTIFIER brack_loop attr_opt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 Variable temp = new Variable((String) id, new Type("null"), (Expression) exp);
	 RESULT = temp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // attr_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // attr_opt ::= EQ variable_initializer 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr_opt",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_initializer_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_initializer_opt ::= variable_initializer_loop comma_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_initializer_loop ::= variable_initializer 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_initializer_loop ::= variable_initializer_loop COMMA variable_initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer_loop",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_initializer ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_initializer ::= LBRACE variable_initializer_opt RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_initializer ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SemanticsImpl.getInstance().validateVariableName(id); 
		Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id); 
		RESULT = var.getValue();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_initializer",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_exp ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_exp ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_exp ::= DOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_exp ::= COMMA expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_exp ::= INSTANCEOF entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = en; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // call_method ::= IDENTIFIER LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if (args != null) {
			SemanticsImpl.getInstance().verifyCallMethod((String) id, (ArrayList<Expression>) args);
			RESULT = id;
		} else {
		    SemanticsImpl.getInstance().verifyCallMethod((String) id, new ArrayList<Expression>());
			RESULT = id;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_method",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // numeric_expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
 		RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numeric_expression ::= pre_pos_op expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
 		RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // numeric_expression ::= expression pre_pos_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
 		RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // numeric_expression ::= expression between_op expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e1, (Expression) e2);
 		RESULT = e1; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bit_expression ::= COMP expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bit_expression ::= expression bit_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // testing_expression ::= expression test_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testing_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e).getType());
		RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical_expression ::= expression logical_op expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e1).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e2).getType());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logical_expression ::= expression QUESTION expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e1).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e2).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e3).getType());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean bl = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("boolean"), bl.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casting_expression ::= LPAREN type RPAREN expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		SemanticsImpl.getInstance().checkTypeCompatibility((Type)t, ((Expression)e).getType());
		((Expression) e).setType((Type) t);
		RESULT = e; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // creating_expression ::= NEW creating_expression_termination 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // creating_expression_termination ::= entity_name LPAREN arglist RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // creating_expression_termination ::= type_specifier creating_expression_opt brack_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // creating_expression_termination ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_termination",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // creating_expression_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // creating_expression_opt ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creating_expression_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bit_op ::= RSHIFTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bit_op ::= LSHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bit_op ::= RSHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bit_op ::= URSHIFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bit_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // string_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // string_op ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_op",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // string_expression ::= expression string_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal_expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Integer il = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("int"), il.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal_expression ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number fl = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("float"), fl.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal_expression ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Boolean bl = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT = new Expression(new Type("boolean"), bl.toString()); 
		SemanticsImpl.getInstance().setCurrentOperator(bl);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal_expression ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String sl = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("String"), sl.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal_expression ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Character cl = (java.lang.Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("char"), cl.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal_expression ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(new Type("null"), "null"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // test_op ::= LT 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // test_op ::= GT 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // test_op ::= LTEQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // test_op ::= GTEQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // test_op ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // test_op ::= NOTEQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // between_op ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // between_op ::= PLUSEQ 
            {
              Object RESULT =null;
		 RESULT = "+="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // between_op ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // between_op ::= MINUSEQ 
            {
              Object RESULT =null;
		 RESULT = "-="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // between_op ::= MULT 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // between_op ::= MULTEQ 
            {
              Object RESULT =null;
		 RESULT = "*="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // between_op ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // between_op ::= DIVEQ 
            {
              Object RESULT =null;
		 RESULT = "/="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // between_op ::= MOD 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // between_op ::= MODEQ 
            {
              Object RESULT =null;
		 RESULT = "%="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("between_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pre_pos_op ::= PLUSPLUS 
            {
              Object RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_pos_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pre_pos_op ::= MINUSMINUS 
            {
              Object RESULT =null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_pos_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = new Type("boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_specifier ::= BYTE 
            {
              Object RESULT =null;
		RESULT = new Type("byte");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		RESULT = new Type("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_specifier ::= SHORT 
            {
              Object RESULT =null;
		RESULT = new Type("short");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // type_specifier ::= INT 
            {
              Object RESULT =null;
		RESULT = new Type("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type_specifier ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = new Type("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // type_specifier ::= LONG 
            {
              Object RESULT =null;
		RESULT = new Type("long");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = new Type("double");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		RESULT = new Type("void");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type_specifier ::= entity_name 
            {
              Object RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object en = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		Type type = new Type((String) en); 
		RESULT = type;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logical_op ::= AND 
            {
              Object RESULT =null;
		 RESULT = "&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logical_op ::= ANDEQ 
            {
              Object RESULT =null;
		 RESULT = "&="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_op ::= OR 
            {
              Object RESULT =null;
		 RESULT = "|"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_op ::= OROR 
            {
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_op ::= OREQ 
            {
              Object RESULT =null;
		 RESULT = "|="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_op ::= XOR 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_op ::= XOREQ 
            {
              Object RESULT =null;
		 RESULT = "^="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logical_op ::= ANDAND 
            {
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logical_op ::= OROREQ 
            {
              Object RESULT =null;
		 RESULT = "||="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logical_op ::= MOD 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logical_op ::= MODEQ 
            {
              Object RESULT =null;
		 RESULT = "%="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // entity_name ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // entity_name ::= entity_name DOT IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entity_name",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // static_initializer ::= STATIC statement_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_initializer",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // attribution ::= IDENTIFIER eq_op expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(e instanceof String) { 
			SemanticsImpl.getInstance().checkVariableAttribution(id, (String) e);
			Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);
		} else {
			SemanticsImpl.getInstance().checkVariableAttribution(id, (Expression) e); 
			Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);

			RESULT = e;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribution",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // eq_op ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "+="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // eq_op ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "-="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // eq_op ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "*="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // eq_op ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "/="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // eq_op ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "%="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // eq_op ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "&=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // eq_op ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "|=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // eq_op ::= XOREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "^=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // eq_op ::= EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // comma_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // comma_opt ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_opt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // type ::= type_specifier brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // identifier_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // identifier_opt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_opt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement ::= variable_declaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement ::= statement_block 
            {
              Object RESULT =null;
		int stdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object std = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = std; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statement ::= if_statement 
            {
              Object RESULT =null;
		int istleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int istright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement ::= do_statement 
            {
              Object RESULT =null;
		int dstmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dstmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dstm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dstm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement ::= while_statement 
            {
              Object RESULT =null;
		int wstmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wstmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object wstm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wstm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement ::= for_statement 
            {
              Object RESULT =null;
		int formleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object form = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = form; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement ::= try_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement ::= SYNCHRONIZED LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement ::= RETURN expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			((Expression) ep).setContext("return");
			RESULT = ep; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement ::= THROW expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement ::= IDENTIFIER COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // statement ::= BREAK identifier_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement ::= CONTINUE identifier_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // try_statement ::= TRY statement catch_op_loop finally_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_statement",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // catch_op_loop ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_op_loop",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // catch_op_loop ::= catch_op_loop CATCH LPAREN parameter RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("catch_op_loop",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // finally_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // finally_opt ::= FINALLY statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finally_opt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // if_statement ::= IF LPAREN expression RPAREN statement else_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // else_opt ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE case_loop RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // case_loop ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_loop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // case_loop ::= case_loop case_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_loop",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // case_op ::= CASE expression COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // case_op ::= DEFAULT COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // case_op ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_statement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // statement_block ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // statement_block ::= LBRACE statement_loop RBRACE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = st;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_block",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // statement_loop ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT = st;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // statement_loop ::= statement_loop statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT = st;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_loop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$3 ::= 
            {
              Object RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	  	SemanticsImpl.getInstance().createFor((Variable) hf, null, (Expression) eo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // for_statement ::= header_for SEMICOLON expression_opt NT$3 SEMICOLON RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		SemanticsImpl.getInstance().dismissCurrentFor((Expression) eo);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$4 ::= 
            {
              Object RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		SemanticsImpl.getInstance().createFor((Variable) hf, (Expression) eo, null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // for_statement ::= header_for expression_opt NT$4 SEMICOLON RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		SemanticsImpl.getInstance().dismissCurrentFor(null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$5 ::= 
            {
              Object RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

		SemanticsImpl.getInstance().createFor((Variable) hf, null, null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // for_statement ::= header_for SEMICOLON RPAREN NT$5 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		SemanticsImpl.getInstance().dismissCurrentFor(null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$6 ::= 
            {
              Object RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eo1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eo2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

	  	SemanticsImpl.getInstance().createFor((Variable) hf, (Expression) eo1, (Expression) eo2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // for_statement ::= header_for expression_opt SEMICOLON expression_opt RPAREN NT$6 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object hf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object eo1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eo2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		SemanticsImpl.getInstance().dismissCurrentFor((Expression) eo2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // header_for ::= FOR LPAREN init_test_upd 
            {
              Object RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().setForExp(true);
		SemanticsImpl.getInstance().nfor++; 
		RESULT = it;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_for",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // init_test_upd ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // init_test_upd ::= variable_declaration 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // init_test_upd ::= expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= eo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // init_test_upd ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_test_upd",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expression_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expression_opt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_opt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // termination_opt ::= statement_block 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = st;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termination_opt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // termination_opt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termination_opt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // parameter ::= type IDENTIFIER brack_loop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	RESULT = new Variable(id, (Type) t);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parameter_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT = ListCreator.newList(p);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	((ArrayList<Parameter>) p1).add((Parameter)p); 
	RESULT = p1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // arglist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // arglist ::= expression_loop 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expression_loop ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ListCreator.newList(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expression_loop ::= expression_loop COMMA expression 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		((ArrayList<Expression>) el).add((Expression)e);
		RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_loop",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expression ::= numeric_expression 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ne; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expression ::= testing_expression 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = te; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expression ::= logical_expression 
            {
              Object RESULT =null;
		int lgeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lgeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lge = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lge; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expression ::= string_expression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = se; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expression ::= bit_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = be; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expression ::= casting_expression 
            {
              Object RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expression ::= creating_expression 
            {
              Object RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cte; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expression ::= literal_expression 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expression ::= NULL_LITERAL 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expression ::= SUPER 
            {
              Object RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object su = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = su; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expression ::= THIS 
            {
              Object RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = th; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		SemanticsImpl.getInstance().validateVariableName(id);
		Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id); 
		RESULT = var.getValue(); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expression ::= attribution 
            {
              Object RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = attr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expression ::= call_method 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expression ::= expression expression_exp 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // brack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // brack_loop ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // brack_loop ::= brack brack_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brack_loop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
