	/*
  parser.cup

*/
import util.Log;
import util.ListCreator;
import main.Main;
import compiler.core.*;
import compiler.analysis.*;
import java.util.ArrayList;
import util.Node;

parser code {:
	public static int errors = 0;
	
	public void report_error(String message, Object info){
   		StringBuffer m = new StringBuffer("Erro ");
		
		errors++;
   		
		if (info instanceof java_cup.runtime.Symbol){
     		m.append( "( "+ info.toString() + ")" );

   			m.append(" : " + message);
			System.err.println("Erro "+ Main.scanner.current_lexeme() + " : Erro sintiatico");
   			System.err.println(m);
 		}
	}

 	public void report_fatal_error(String message, Object info) {
   		report_error(message, info);
   		throw new RuntimeException("Ocorreu um erro de sintaxe.");
 	}
:};

/* ------------ Declaracao dos temrinais e nao terminais ----------- */

/* ---- Palavras Reservadas ---- */
terminal ABSTRACT;
terminal BOOLEAN;
terminal BREAK;
terminal BYTE;
terminal CASE;
terminal CATCH;
terminal CHAR;
terminal CLASS;
terminal CONTINUE;
terminal DEFAULT;
terminal DOUBLE;
terminal DO;
terminal ELSE;
terminal EXTENDS;
terminal FINALLY;
terminal FINAL;
terminal FLOAT;
terminal FOR;
terminal IF;
terminal IMPLEMENTS;
terminal IMPORT;
terminal INSTANCEOF;
terminal INTERFACE;
terminal INT;
terminal LONG;
terminal NATIVE;
terminal NEW;
terminal NULL_LITERAL;
terminal PACKAGE;

terminal PRIVATE;
terminal PROTECTED;
terminal PUBLIC;

terminal RETURN;
terminal SHORT;
terminal STATIC;
terminal SUPER;
terminal SWITCH;
terminal SYNCHRONIZED;
terminal THIS;
terminal THREADSAFE;
terminal THROW;
terminal TRANSIENT;
terminal TRY;
terminal VOID;
terminal WHILE;

/* ---- Separadores ---- */
terminal LPAREN;
terminal RPAREN;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
/* ---- Atribuicao ---- */
terminal EQ;

/* ---- Operadores aritmeticos ---- */

terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal PLUSPLUS;
terminal PLUSEQ;
terminal MINUSEQ;
terminal MULTEQ;
terminal DIVEQ;
terminal MINUSMINUS;
terminal MOD;
terminal MODEQ;
terminal LSHIFT;
terminal RSHIFT;
terminal URSHIFT;
/* ---- Operadores ---- */
terminal COLON;
terminal COMP;
/* ---- Operadores Logicos ----  */
terminal EQEQ;
terminal GTEQ;
terminal LTEQ;
terminal LT;
terminal GT;
terminal OROR;
terminal OROREQ;
terminal ANDAND;
terminal AND;
terminal NOT;
terminal NOTEQ;
terminal OR;
terminal ANDEQ;
terminal OREQ;
terminal XOR;
terminal XOREQ;
terminal RSHIFTEQ;
terminal LSHIFTEQ;
terminal QUESTION;

/* ---- Tipos ---- */
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER; 
terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;

non terminal compilation_unit;
non terminal type_specifier;
non terminal type;
non terminal identifier_opt;

non terminal expression;
non terminal expression_opt;
non terminal expression_loop;
non terminal expression_exp;
non terminal numeric_expression;
non terminal literal_expression;
non terminal string_expression;
non terminal bit_expression;
non terminal casting_expression;
non terminal testing_expression;
non terminal creating_expression;
non terminal creating_expression_termination;
non terminal creating_expression_opt;
non terminal logical_expression;
non terminal call_method;

non terminal pre_pos_op;
non terminal between_op;
non terminal string_op;
non terminal test_op;
non terminal bit_op;
non terminal logical_op;
non terminal eq_op;

non terminal brack;
non terminal brack_loop;

non terminal comma_opt;

non terminal termination_opt;

non terminal statement;
non terminal statement_block;
non terminal statement_loop;
non terminal do_statement;

non terminal modifier;
non terminal modifier_loop;

non terminal attribution;

non terminal package_declaration_opt;
non terminal package_statement;

non terminal import_statement_loop;
non terminal import_statement;
non terminal import_aux;

non terminal for_statement;
non terminal header_for;
non terminal init_test_upd;

non terminal while_statement;

non terminal if_statement;
non terminal else_opt;

non terminal switch_statement;
non terminal case_loop;
non terminal case_op;

non terminal type_declaration;
non terminal entity_name;

non terminal try_statement;
non terminal catch_op_loop;
non terminal finally_opt;

non terminal implements_declaration_opt;
non terminal implements_declaration_loop;
non terminal extends_declaration_opt;
non terminal class_declaration;
non terminal interface_declaration;
non terminal extends_interface_opt;

non terminal field_declaration;
non terminal field_declaration_loop;
non terminal constructor_declaration;
non terminal method_declaration;
non terminal declarations;
non terminal static_initializer;

non terminal variable_declaration;
non terminal variable_declarator;
non terminal variable_declarator_loop;
non terminal variable_initializer;
non terminal variable_initializer_opt;
non terminal variable_initializer_loop;
non terminal attr_opt;

non terminal parameter_list_opt;
non terminal parameter_list;
non terminal parameter;

non terminal arglist;

precedence left ELSE;
precedence right NOT;
precedence left COMP;
precedence left SEMICOLON;
precedence left FINALLY;
precedence left NEW;
precedence left OROREQ;
precedence left OROR;
precedence left CATCH;
precedence left INSTANCEOF;
precedence left DOT;
precedence left COMMA;
precedence left RPAREN;
precedence left RBRACE;
precedence left LBRACK,LPAREN;
precedence left MODEQ,MULTEQ,DIVEQ,MINUSEQ,PLUSEQ,MOD;
precedence left PLUS,MINUS;
precedence left MULT,DIV;
precedence left PLUSPLUS,MINUSMINUS;
precedence left RSHIFTEQ, URSHIFT, RSHIFT,LSHIFT;
precedence left EQEQ,NOTEQ;
precedence left GTEQ;
precedence left LTEQ;
precedence left GT;
precedence left LT;
precedence left DOT;
precedence left XOREQ,OREQ,ANDEQ,XOR,OR,AND,ANDAND,QUESTION;
precedence left TRANSIENT,THROW, THREADSAFE, THIS, SYNCHRONIZED, SUPER, STATIC,SHORT;
precedence left SHORT,RETURN, PUBLIC,PRIVATE, NATIVE,LONG, INT, FLOAT;
precedence left INTEGER_LITERAL;
precedence left FLOAT;
precedence left BOOLEAN_LITERAL;
precedence left STRING_LITERAL;
precedence left CHARACTER_LITERAL;
precedence left NULL_LITERAL;


start with compilation_unit;

compilation_unit ::= package_declaration_opt import_statement_loop type_declaration
	| package_declaration_opt type_declaration
;

package_statement ::= PACKAGE entity_name SEMICOLON;
package_declaration_opt ::= | package_statement;

import_statement_loop ::= import_statement 
	| import_statement import_statement_loop;

import_statement ::= IMPORT import_aux:iaux SEMICOLON {:
					SemanticsImpl.getInstance().addType(new Type(((String) iaux))); :}
; 
import_aux ::= 
	entity_name:en DOT MULT 			{: RESULT = en; :} 
	| entity_name:en					{: RESULT = en; :}
;

type_declaration ::= class_declaration | interface_declaration;

class_declaration ::= modifier CLASS IDENTIFIER:id {:  
						Type type = new Type(id);
						SemanticsImpl.getInstance().addType(type);
					:} 
					extends_declaration_opt:superclass {:
						SemanticsImpl.getInstance().addSuperType((String) id, (String) superclass);
					:} 
					implements_declaration_opt LBRACE field_declaration_loop RBRACE {:
						SemanticsImpl.getInstance().getCodeGenerator().generateFinalAssemblyCode();
					:}
;

extends_interface_opt ::= | EXTENDS implements_declaration_loop;

interface_declaration ::= modifier INTERFACE IDENTIFIER extends_interface_opt LBRACE field_declaration_loop RBRACE;

extends_declaration_opt ::= | EXTENDS entity_name:name {:RESULT = name;:};

modifier_loop ::= | modifier_loop modifier;

modifier ::=
    PUBLIC                                                                 
    | PRIVATE                                                               
    | PROTECTED                                                             
    | STATIC                                                                
    | FINAL                                                                 
    | NATIVE                                                                
    | SYNCHRONIZED                                                          
    | ABSTRACT                                                              
    | THREADSAFE                                                            
    | TRANSIENT                                                            
;

implements_declaration_loop ::= entity_name |
						entity_name COMMA implements_declaration_opt
;
implements_declaration_opt ::= | IMPLEMENTS implements_declaration_loop;

field_declaration_loop ::= | field_declaration_loop field_declaration:fd {:
	RESULT = fd;
:};

field_declaration ::= 
	declarations
	| static_initializer
	| SEMICOLON
;
declarations ::= 
	method_declaration
	| constructor_declaration 
	| variable_declaration
;

method_declaration ::= 
	modifier_loop type:t IDENTIFIER:id 
	LPAREN parameter_list_opt:p RPAREN 
	{:
		SemanticsImpl.getInstance().validateFunction(id, (ArrayList<Parameter>) p, (Type) t); 
	:} 
	termination_opt:to {:
		if(to instanceof Expression){
			SemanticsImpl.getInstance().exitCurrentScope((Expression) to);
		} else {
			SemanticsImpl.getInstance().exitCurrentScope();
		}
		SemanticsImpl.getInstance().getCodeGenerator().addBRSP((String) id);
	:}
;

call_method ::= 
	IDENTIFIER:id LPAREN 
	arglist:args RPAREN		{: 
		if (args != null) {
			SemanticsImpl.getInstance().verifyCallMethod((String) id, (ArrayList<Expression>) args);
			RESULT = id;
			SemanticsImpl.getInstance().getCodeGenerator().generateCodeFunctionCall((String) id, (ArrayList<Expression>) args);
		} else {
		    SemanticsImpl.getInstance().verifyCallMethod((String) id, new ArrayList<Expression>());
			RESULT = id;
			SemanticsImpl.getInstance().getCodeGenerator().generateCodeFunctionCall((String) id);
		}
	:}
;

constructor_declaration ::= modifier_loop IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block;

variable_declaration ::=
	type:t variable_declarator_loop:v SEMICOLON
	 {:
		SemanticsImpl.getInstance().checkTypeVariablesCompatibility(((Variable) v).getType(), (Type) t);

		SemanticsImpl.getInstance().addVariablesFromTempList((Type) t);
		RESULT = v;
	:}
	| modifier_loop type:t variable_declarator_loop:v SEMICOLON
;

variable_declarator_loop ::= 
	variable_declarator:var {:
 		SemanticsImpl.getInstance().addVariableToTempList((Variable) var); 
		RESULT = var;
	:}
	| variable_declarator:var COMMA variable_declarator_loop {:
		 SemanticsImpl.getInstance().addVariableToTempList((Variable) var);
	:};

variable_declarator ::= IDENTIFIER:id brack_loop attr_opt:exp 
{:
	Variable temp = new Variable((String) id, new Type(((Expression) exp).getType().getTypeName()), (Expression) exp);
	if(!SemanticsImpl.getInstance().isForExp) {
		SemanticsImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable) temp, (Expression) exp);
	}
	RESULT = temp;
:};

attr_opt ::= 
	| EQ variable_initializer:exp {:
		RESULT = exp;
:};

variable_initializer_opt ::=                             
    | variable_initializer_loop comma_opt
;

variable_initializer_loop ::=
    variable_initializer:v {: RESULT = v; :}                                    
    | variable_initializer_loop COMMA variable_initializer
;

variable_initializer ::= 
	expression:e {: RESULT = e; :}
	| LBRACE variable_initializer_opt RBRACE
	| IDENTIFIER:id 
	{:
		SemanticsImpl.getInstance().validateVariableName(id); 
		Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);
		if(!SemanticsImpl.getInstance().isForExp) {
			SemanticsImpl.getCodeGenerator().generateLDCode((Variable) var);
		}
		RESULT = var.getValue();
	:}
;

expression_exp ::=
	LPAREN arglist:args RPAREN		{: RESULT = args; :}
    | LBRACK expression:e RBRACK	{: RESULT = e; :}
    | DOT expression:e				{: RESULT = e; :}
    | COMMA expression:e			{: RESULT = e; :}
    | INSTANCEOF entity_name:en		{: RESULT = en; :}
;

numeric_expression ::= 
	MINUS expression:e 					
	{: 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
		SemanticsImpl.getInstance().getCodeGenerator().generateMULNegativeCode();
 		RESULT = e; 
	:}
	| pre_pos_op expression:e 					
	{: 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
 		RESULT = e; 
	:}
	| expression:e pre_pos_op:po 					
	{: 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e);
 		RESULT = SemanticsImpl.getInstance().getExpression((Expression) e, Operation.valueOf(((Node) po).getIdentifier()), null);; 
	:}
	| expression:e1 between_op:bo expression:e2 					
	{: 
		SemanticsImpl.getInstance().isNumericExpression((Expression) e1, (Expression) e2);
 		RESULT = SemanticsImpl.getInstance().getExpression((Expression) e1, Operation.valueOf(((Node) bo).getIdentifier()),	(Expression) e2); 
	:}
;

bit_expression ::= 
	COMP expression
	| expression bit_op expression;

testing_expression ::=
	expression:e1 test_op:to expression:e2 
	{:
		SemanticsImpl.getInstance().isRelationalExpression((Expression) e1, (Expression) e2);
	    RESULT = SemanticsImpl.getInstance().getExpression((Expression) e1,
	                                                       Operation.valueOf(((Node) to).getIdentifier()), 
															(Expression) e2);
	:}
;

literal_expression ::= 
	BOOLEAN_LITERAL:bl 
	{: 
		RESULT = new Expression(new Type("boolean"), bl.toString()); 
	:}
;

logical_expression ::= 
	NOT:op expression:e 
	{: 
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e).getType());
		RESULT = e;
	:}
	| expression:e1 logical_op:lo expression:e2
	{:
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e1).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e2).getType());
		RESULT = SemanticsImpl.getInstance().getExpression((Expression) e1,
                                                          Operation.valueOf(((Node) lo).getIdentifier()), 
														  (Expression) e2); 
	:}
	| expression:e1 QUESTION expression:e2 COLON expression:e3 
	{: 
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e1).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e2).getType());
		SemanticsImpl.getInstance().checkIsBoolean(((Expression)e3).getType());
	:}
	| BOOLEAN_LITERAL:bl 
	{: 
		RESULT = new Expression(new Type("boolean"),bl.toString());
	:}
;

casting_expression ::= 
	LPAREN type:t RPAREN expression:e 
	{:
		SemanticsImpl.getInstance().checkTypeCompatibility((Type)t, ((Expression)e).getType());
		((Expression) e).setType((Type) t);
		RESULT = e; 
	:}
;

creating_expression ::= NEW creating_expression_termination;

creating_expression_termination ::= 
	entity_name LPAREN arglist RPAREN
	| type_specifier creating_expression_opt brack_loop 
	| LPAREN expression RPAREN
;

creating_expression_opt ::= 
	| LPAREN expression RPAREN
;

bit_op ::= 
	RSHIFTEQ
	| LSHIFT
	| RSHIFT
	| URSHIFT
;

string_op ::= 
	PLUS {: RESULT = new Node("+","primary", "PLUS"); :}
	| PLUSEQ {: RESULT = new Node("+=","primary", "PLUSEQ"); :}
;

string_expression ::= 
	expression:e1 string_op:so expression:e2 
	{:
		SemanticsImpl.getInstance().isNumericExpression((Expression) e1, (Expression) e2);
 		RESULT = SemanticsImpl.getInstance().getExpression((Expression) e1, Operation.valueOf(((Node) so).getIdentifier()),	(Expression) e2); 	
	:}
;

literal_expression ::= 
	INTEGER_LITERAL:il {: RESULT = new Expression(new Type("int"), il.toString()); :}
	| FLOATING_POINT_LITERAL:fl {: RESULT = new Expression(new Type("float"), fl.toString()); :}
	| BOOLEAN_LITERAL:bl {: RESULT = new Expression(new Type("boolean"), bl.toString()); :}
	| STRING_LITERAL:sl {: RESULT = new Expression(new Type("String"), sl.toString()); :}
	| CHARACTER_LITERAL:cl {: RESULT = new Expression(new Type("char"), cl.toString()); :}
	| NULL_LITERAL:nl {: RESULT = new Expression(new Type("null"), "null"); :}
;

test_op ::= 
    GT       {: RESULT = new Node(">","primary", "GT"); :}
    | LT     {: RESULT = new Node("<","primary", "LT"); :}
    | GTEQ   {: RESULT = new Node(">=","primary", "GTEQ"); :}
    | LTEQ   {: RESULT = new Node("<=","primary", "LTEQ"); :}
    | EQEQ   {: RESULT = new Node("==","primary", "EQEQ"); :}
    | NOTEQ  {: RESULT = new Node("!=","primary", "NOTEQ"); :}
    | NOT    {: RESULT = new Node("!","primary", "NOT"); :}
;

between_op ::= 
	PLUS       {: RESULT = new Node("+","primary", "PLUS"); :}
	| PLUSEQ   {: RESULT = new Node("+=","primary", "PLUSEQ"); :}
	| MINUS    {: RESULT = new Node("-","primary", "MINUS"); :}
	| MINUSEQ  {: RESULT = new Node("-=","primary", "MINUSEQ"); :}
	| MULT     {: RESULT = new Node("*","primary", "MULT"); :}
	| MULTEQ   {: RESULT = new Node("*=","primary", "MULTEQ"); :}
	| DIV      {: RESULT = new Node("/","primary", "DIV"); :}
	| DIVEQ    {: RESULT = new Node("/=","primary", "DIVEQ"); :}
	| MOD      {: RESULT = new Node("%","primary", "MOD"); :}
	| MODEQ    {: RESULT = new Node("%=","primary", "MODEQ"); :}
;	

pre_pos_op ::= 
	PLUSPLUS:pp {: RESULT = new Node("++","primary", "PLUSPLUS"); :}
	| MINUSMINUS:mm {: RESULT = new Node("--","primary", "MINUSMINUS"); :};

type_specifier ::= BOOLEAN {:RESULT = new Type("boolean");:}
	| BYTE {:RESULT = new Type("byte");:}		                                                            
    | CHAR {:RESULT = new Type("char");:}		                                                            
    | SHORT	{:RESULT = new Type("short");:}	                                                            
    | INT {:RESULT = new Type("int");:}		                                                            
    | FLOAT	{:RESULT = new Type("float");:}	                                                            
    | LONG	{:RESULT = new Type("long");:}	                                                            
    | DOUBLE {:RESULT = new Type("double");:}	                                                            
    | VOID {:RESULT = new Type("void");:}
    | entity_name:en {:
		Type type = new Type((String) en); 
		RESULT = type;
	:}
;

logical_op ::=
	AND			{: RESULT = new Node("&","primary", "AND"); :}
   	| ANDEQ     {: RESULT = new Node("&=","primary", "ANDEQ"); :}
    | OR        {: RESULT = new Node("|","primary", "OR"); :}
    | OROR      {: RESULT = new Node("||","primary", "OROR"); :}
    | OREQ      {: RESULT = new Node("|=","primary", "OREQ"); :}
    | XOR       {: RESULT = new Node("^","primary", "XOR"); :}
    | XOREQ     {: RESULT = new Node("^=","primary", "XOREQ"); :}
    | ANDAND    {: RESULT = new Node("&&","primary", "ANDAND"); :}
    | OROREQ    {: RESULT = new Node("||=","primary", "OROREQ"); :}
    | MOD       {: RESULT = new Node("%","primary", "MOD"); :}
    | MODEQ     {: RESULT = new Node("%=","primary", "MODEQ"); :}
;

entity_name ::=
	IDENTIFIER:id 					{: RESULT = id; :}
	| entity_name DOT IDENTIFIER:id {: RESULT = id; :}
;

static_initializer ::= STATIC statement_block;

attribution ::= IDENTIFIER:id eq_op:eo expression:e
	{:
		if(e instanceof String) { 
			SemanticsImpl.getInstance().checkVariableAttribution(id, (String) e);
			Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);
			if(!SemanticsImpl.getInstance().isForExp) {
				SemanticsImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable)var,(String)e);
			}
		} else {
			SemanticsImpl.getInstance().checkVariableAttribution(id, (Expression) e); 
			Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);
			var.setValue((Expression) e);
			if(!SemanticsImpl.getInstance().isForExp) {
				SemanticsImpl.getInstance().getCodeGenerator().assignmentDeclaration((Variable)var,(Expression)e);
			}
			RESULT = e;
		}
	:}
;

eq_op ::= 
	PLUSEQ:op {: RESULT = "+="; :}
	| MINUSEQ:op {: RESULT = "-="; :}
	| MULTEQ:op {: RESULT = "*="; :}
	| DIVEQ:op {: RESULT = "/="; :}
	| MODEQ:op {: RESULT = "%="; :}
	| ANDEQ:op {: RESULT = "&=";:}
	| OREQ:op {: RESULT = "|=";:}
	| XOREQ:op {: RESULT = "^=";:}
	| EQ:op {: RESULT = "="; :}
;

comma_opt ::= | COMMA;

type ::= type_specifier:t brack_loop {: RESULT = t; :};

identifier_opt ::= | IDENTIFIER;

statement ::= 
	variable_declaration:vd {: RESULT = vd; :}
	| expression:e SEMICOLON {: RESULT = e; :}
	| statement_block:std {: RESULT = std; :}
	| if_statement:ist {: RESULT = ist; :}
	| do_statement:dstm {: RESULT = dstm; :}
	| while_statement:wstm {: RESULT = wstm; :}
	| for_statement:form {: RESULT = form; :}
	| try_statement
	| switch_statement
	| SYNCHRONIZED LPAREN expression RPAREN statement
	| RETURN expression_opt:ep SEMICOLON	{: 
			((Expression) ep).setContext("return");
			RESULT = ep; 
		:}
	| THROW expression SEMICOLON
	| IDENTIFIER COLON statement
	| BREAK identifier_opt SEMICOLON
	{:
		if(SemanticsImpl.getInstance().nfor > 0) {
			SemanticsImpl.getInstance().getCodeGenerator().generateBREAKcode();
		}
	:}
	| CONTINUE identifier_opt SEMICOLON 
	| SEMICOLON
;

try_statement ::= TRY statement catch_op_loop finally_opt; 

catch_op_loop ::= 
	| catch_op_loop CATCH LPAREN parameter RPAREN statement;

finally_opt ::= 
	| FINALLY statement
;

if_statement ::= 
	IF LPAREN expression RPAREN statement else_opt
;

else_opt ::= 
	| ELSE statement
;

while_statement ::=
    WHILE LPAREN expression RPAREN statement
;

switch_statement ::= 
	SWITCH LPAREN expression RPAREN LBRACE case_loop RBRACE;

case_loop ::= 
	| case_loop case_op
;

case_op ::= 
	CASE expression COLON
	| DEFAULT COLON
	| statement;

do_statement ::= 
	DO statement WHILE LPAREN expression RPAREN SEMICOLON
;

statement_block ::= LBRACE RBRACE | LBRACE statement_loop:st RBRACE {:
	RESULT = st;
:};

statement_loop ::= statement:st {:
	RESULT = st;
:} | statement_loop statement:st {:
	RESULT = st;
:};

for_statement ::= 
	header_for:hf SEMICOLON expression_opt:eo 
	{:
	  	SemanticsImpl.getInstance().createFor((Variable) hf, null, (Expression) eo);
	:}
	SEMICOLON RPAREN statement 
	{:
		SemanticsImpl.getInstance().dismissCurrentFor((Expression) eo);
	:}
	
	| header_for:hf expression_opt:eo 
	{:
		SemanticsImpl.getInstance().createFor((Variable) hf, (Expression) eo, null);
	:}
	SEMICOLON RPAREN statement
	{:
		SemanticsImpl.getInstance().dismissCurrentFor(null);
	:}
	
	| header_for:hf SEMICOLON RPAREN 
	{:
		SemanticsImpl.getInstance().createFor((Variable) hf, null, null);
	:}
	statement
	{:
		SemanticsImpl.getInstance().dismissCurrentFor(null);
	:}
	
	| header_for:hf expression_opt:eo1 SEMICOLON expression_opt:eo2 RPAREN
	{:
	  	SemanticsImpl.getInstance().createFor((Variable) hf, (Expression) eo1, (Expression) eo2);
	:} 
	statement
	{:
		SemanticsImpl.getInstance().dismissCurrentFor((Expression) eo2);
	:}
;

header_for ::= 
	FOR LPAREN init_test_upd:it		
	{: 
		SemanticsImpl.getInstance().setForExp(true);
		SemanticsImpl.getInstance().nfor++; 
		RESULT = it;
	:}	
;

init_test_upd ::= 
	| variable_declaration:vd		{: RESULT= vd; :}
	| expression_opt:eo SEMICOLON	{: RESULT= eo; :}
	| SEMICOLON
;

expression_opt ::= 
	| expression:e	{: RESULT = e; :}
;

termination_opt ::= statement_block:st 
	{:
		RESULT = st;
	:} 
	| SEMICOLON
;

parameter ::= type:t IDENTIFIER:id brack_loop {:
	RESULT = new Variable(id, (Type) t);
:};

parameter_list_opt ::= | parameter_list:p1 {: RESULT = p1; :};

parameter_list ::= parameter:p {:
	RESULT = ListCreator.newList(p);
:} | parameter_list:p1 COMMA parameter:p {:
	((ArrayList<Parameter>) p1).add((Parameter)p); 
	RESULT = p1;
:};

arglist ::= 
	| expression_loop:el	{: RESULT = el; :}
;

expression_loop ::=
    expression:e	{: RESULT = ListCreator.newList(e); :}
    | expression_loop:el COMMA expression:e	
    {: 
		((ArrayList<Expression>) el).add((Expression)e);
		RESULT = e;
	:}                                                                                            
;

expression ::= 
	numeric_expression:ne			{: RESULT = ne; :}
	| testing_expression:te			{: RESULT = te; :}
	| logical_expression:lge		{: RESULT = lge; :}
	| string_expression:se			{: RESULT = se; :}
	| bit_expression:be				{: RESULT = be; :}
	| casting_expression:ce			{: RESULT = ce; :}
	| creating_expression:cte		{: RESULT = cte; :}
	| literal_expression:le			
	{: 
		if(!SemanticsImpl.getInstance().isForExp) {
			SemanticsImpl.getInstance().getCodeGenerator().generateLDCode((Expression) le);
		} 
		RESULT = le; 
	:}
	| call_method:cm				
	{: 
    	RESULT = new Expression(new Type((String) SemanticsImpl.getInstance().getFunctionType((String) cm)), (String) cm);
	:}
	| NULL_LITERAL:nl				{: RESULT = nl; :}
	| SUPER:su						{: RESULT = su; :}
	| THIS:th						{: RESULT = th; :}
	| IDENTIFIER:id					
	{: 
		SemanticsImpl.getInstance().validateVariableName(id);
		Variable var = SemanticsImpl.getInstance().findVariableByIdentifier((String) id);

 		if(!SemanticsImpl.getInstance().isForExp) {
			SemanticsImpl.getInstance().getCodeGenerator().generateLDCode((Variable) var);
		}

		if(var.getValue()!=null) {
            RESULT = new Expression(var.getType(), var.getIdentifier());
        } else {
            RESULT = new Expression(var.getType(), var.getIdentifier());
        }	
	:}
	| attribution:attr				{: RESULT = attr; :}
	| LPAREN expression:e1 RPAREN	{: RESULT = e1; :}
	| expression:e2 expression_exp	{: RESULT = e2; :}
;

brack ::= LBRACK RBRACK;

brack_loop ::= | brack brack_loop;