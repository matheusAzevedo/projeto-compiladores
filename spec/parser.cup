/*
  parser.cup

*/
import java_cup.runtime.*;
import compiler.core.*;
import util.Log;
parser code {:
	public void report_error(String message, Object info){
   		StringBuffer m = new StringBuffer("Erro ");

   		if (info instanceof java_cup.runtime.Symbol){
     		m.append( "( "+ info.toString() + ")" );

   			m.append(" : " + message);

   			System.out.println(m);
 		}
	}

 	public void report_fatal_error(String message, Object info) {
   		report_error(message, info);
   		throw new RuntimeException("Ocorreu um erro de sintaxe.");
 	}
:};

/* ------------ Declaracao dos temrinais e nao terminais ----------- */

/* ---- Palavras Reservadas ---- */
terminal ABSTRACT;
terminal BOOLEAN;
terminal BREAK;
terminal BYTE;
terminal CASE;
terminal CATCH;
terminal CHAR;
terminal CLASS;
terminal CONTINUE;
terminal DEFAULT;
terminal DOUBLE;
terminal DO;
terminal ELSE;
terminal EXTENDS;
terminal FINALLY;
terminal FINAL;
terminal FLOAT;
terminal FOR;
terminal IF;
terminal IMPLEMENTS;
terminal IMPORT;
terminal INSTANCEOF;
terminal INTERFACE;
terminal INT;
terminal LONG;
terminal NATIVE;
terminal NEW;
terminal PACKAGE;

terminal PRIVATE;
terminal PROTECTED;
terminal PUBLIC;

terminal RETURN;
terminal SHORT;
terminal STATIC;
terminal SUPER;
terminal SWITCH;
terminal SYNCHRONIZED;
terminal THIS;
terminal THREADSAFE;
terminal THROW;
terminal TRANSIENT;
terminal TRY;
terminal VOID;
terminal WHILE;

/* ---- Separadores ---- */
terminal LPAREN;
terminal RPAREN;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
/* ---- Atribuicao ---- */
terminal EQ;

/* ---- Operadores aritmeticos ---- */

terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal PLUSPLUS;
terminal PLUSEQ;
terminal MINUSEQ;
terminal MULTEQ;
terminal DIVEQ;
terminal MINUSMINUS;
terminal MOD;
terminal MODEQ;
terminal LSHIFT;
terminal RSHIFT;
terminal URSHIFT;
/* ---- Operadores ---- */
terminal COLON;
terminal COMP;
/* ---- Operadores Logicos ----  */
terminal EQEQ;
terminal GTEQ;
terminal LTEQ;
terminal LT;
terminal GT;
terminal OROR;
terminal OROREQ;
terminal ANDAND;
terminal AND;
terminal NOT;
terminal NOTEQ;
terminal OR;
terminal ANDEQ;
terminal OREQ;
terminal XOR;
terminal XOREQ;
terminal RSHIFTEQ;
terminal LSHIFTEQ;
terminal QUESTION;

/* ---- Tipos ---- */
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER; 
terminal java.lang.Integer INTEGER_LITERAL;

non terminal compilation_unit;
non terminal type_specifier;

non terminal modifier;
non terminal modifier_loop;

non terminal package_declaration_opt;
non terminal package_statement;

non terminal import_statement_loop;
non terminal import_statement;
non terminal import_aux;

non terminal type_declaration;
non terminal entity_name;

non terminal class_declaration;
non terminal interface_declaration;

start with compilation_unit;

type_specifier ::= BOOLEAN 
	| BYTE 		                                                            
    | CHAR 		                                                            
    | SHORT		                                                            
    | INT		                                                            
    | FLOAT		                                                            
    | LONG		                                                            
    | DOUBLE 	                                                            
    | VOID 		                                                            ;

modifier ::=
    PUBLIC                                                                 
    | PRIVATE                                                               
    | PROTECTED                                                             
    | STATIC                                                                
    | FINAL                                                                 
    | NATIVE                                                                
    | SYNCHRONIZED                                                          
    | ABSTRACT                                                              
    | THREADSAFE                                                            
    | TRANSIENT                                                            
;
        
compilation_unit ::= package_declaration_opt import_statement_loop type_declaration
	| package_declaration_opt type_declaration
;

package_declaration_opt ::= | package_statement;
package_statement ::= PACKAGE entity_name SEMICOLON;

import_statement_loop ::= import_statement 
	| import_statement import_statement_loop;
	
import_statement ::= IMPORT import_aux:ia SEMICOLON;
import_aux ::= entity_name DOT MULT
    | entity_name
;

entity_name ::=
    IDENTIFIER                                                           
    | entity_name DOT IDENTIFIER
;
type_declaration ::= class_declaration;

class_declaration ::= modifier_loop CLASS entity_name LBRACE RBRACE;

modifier_loop ::= | modifier modifier_loop; 