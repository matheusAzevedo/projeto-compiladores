/*
  parser.cup

*/
import compiler.core.*;
import util.Log;
parser code {:
	public void report_error(String message, Object info){
   		StringBuffer m = new StringBuffer("Erro ");

   		if (info instanceof java_cup.runtime.Symbol){
     		m.append( "( "+ info.toString() + ")" );

   			m.append(" : " + message);

   			System.out.println(m);
 		}
	}

 	public void report_fatal_error(String message, Object info) {
   		report_error(message, info);
   		throw new RuntimeException("Ocorreu um erro de sintaxe.");
 	}
:};

/* ------------ Declaracao dos temrinais e não terminais ----------- */

/* ---- Palavras Reservadas ---- */
terminal ABSTRACT;
terminal BOOLEAN;
terminal BREAK;
terminal BYTE;
terminal CASE;
terminal CATCH;
terminal CHAR;
terminal CLASS;
terminal CONTINUE;
terminal DEFAULT;
terminal DOUBLE;
terminal DO;
terminal ELSE;
terminal EXTENDS;
terminal FINALLY;
terminal FINAL;
terminal FLOAT;
terminal FOR;
terminal IF;
terminal IMPLEMENTS;
terminal IMPORT;
terminal INSTANCEOF;
terminal INTERFACE;
terminal INT;
terminal LONG;
terminal NATIVE;
terminal NEW;
terminal PACKAGE;

terminal PRIVATE;
terminal PROTECTED;
terminal PUBLIC;

terminal RETURN;
terminal SHORT;
terminal STATIC;
terminal SUPER;
terminal SWITCH;
terminal SYNCHRONIZED;
terminal THIS;
terminal THREADSAFE;
terminal THROW;
terminal TRANSIENT;
terminal TRY;
terminal VOID;
terminal WHILE;

/* ---- Separadores ---- */
terminal LPAREN;
terminal RPAREN;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal COMMA;
terminal DOT;
/* ---- Atribuição ---- */
terminal EQ;

/* ---- Operadores aritméticos ---- */

terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal PLUSPLUS;
terminal PLUSEQ;
terminal MINUSEQ;
terminal MULTEQ;
terminal DIVEQ;
terminal MINUSMINUS;
terminal MOD;
terminal MODEQ;
terminal LSHIFT;
terminal RSHIFT;
terminal URSHIFT;
/* ---- Operadores ---- */
terminal COLON;
terminal COMP;
/* ---- Operadores Lógicos ----  */
terminal EQEQ;
terminal GTEQ;
terminal LTEQ;
terminal LT;
terminal GT;
terminal OROR;
terminal OROREQ;
terminal ANDAND;
terminal AND;
terminal NOT;
terminal NOTEQ;
terminal OR;
terminal ANDEQ;
terminal OREQ;
terminal XOR;
terminal XOREQ;
terminal RSHIFTEQ;
terminal LSHIFTEQ;
terminal QUESTION;

/* ---- Tipos ---- */
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER; 
terminal java.lang.Integer INTEGER_LITERAL;

non terminal begin;
non terminal operator;

start with begin;

begin ::= INTEGER_LITERAL operator INTEGER_LITERAL SEMICOLON {:Log.log("Aqui");:};
operator ::= MINUS | PLUS | DIV | MULT;